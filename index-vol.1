<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coffee Shop POS Pro Plus - ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≤‡∏¢‡∏´‡∏ô‡πâ‡∏≤‡∏£‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡πÅ‡∏ü</title>
    
    <!-- React & Babel -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Chart.js -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        body { 
            font-family: 'Kanit', sans-serif; 
        }
        .scrollbar-hide::-webkit-scrollbar { 
            display: none; 
        }
        .scrollbar-hide { 
            -ms-overflow-style: none; 
            scrollbar-width: none; 
        }
        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
        .slide-in {
            animation: slideIn 0.3s ease-out;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef, createContext, useContext } = React;

        // ==================== MOCK DATABASE SERVICE ====================
        const DatabaseService = {
            // Initial Data
            categories: [
                { id: 1, name: '‡∏Å‡∏≤‡πÅ‡∏ü', icon: '‚òï', code: 'coffee', display_order: 1, is_active: true },
                { id: 2, name: '‡∏ä‡∏≤', icon: 'üçµ', code: 'tea', display_order: 2, is_active: true },
                { id: 3, name: '‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï', icon: 'üç´', code: 'chocolate', display_order: 3, is_active: true },
                { id: 4, name: '‡∏ô‡∏°', icon: 'ü•õ', code: 'milk', display_order: 4, is_active: true },
                { id: 5, name: '‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà', icon: 'ü•ê', code: 'bakery', display_order: 5, is_active: true }
            ],

            menuItems: [
                { 
                    id: 1, name: '‡∏Ñ‡∏≤‡∏õ‡∏π‡∏ä‡∏¥‡πÇ‡∏ô', category: 'coffee', price: 65, image: '‚òï', 
                    allow_size: true, allow_temperature: true, allow_sweetness: true, allow_addons: true, is_active: true
                },
                { 
                    id: 2, name: '‡∏•‡∏≤‡πÄ‡∏ï‡πâ', category: 'coffee', price: 60, image: '‚òï', 
                    allow_size: true, allow_temperature: true, allow_sweetness: true, allow_addons: true, is_active: true
                },
                { 
                    id: 3, name: '‡πÄ‡∏≠‡∏™‡πÄ‡∏û‡∏£‡∏™‡πÇ‡∏ã', category: 'coffee', price: 50, image: '‚òï', 
                    allow_size: false, allow_temperature: true, allow_sweetness: false, allow_addons: false, is_active: true
                },
                { 
                    id: 4, name: '‡∏°‡∏±‡∏Ñ‡∏Ñ‡∏¥‡∏≠‡∏≤‡πÇ‡∏ï', category: 'coffee', price: 70, image: '‚òï', 
                    allow_size: true, allow_temperature: true, allow_sweetness: true, allow_addons: true, is_active: true
                },
                { 
                    id: 5, name: '‡∏ä‡∏≤‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß', category: 'tea', price: 55, image: 'üçµ', 
                    allow_size: true, allow_temperature: true, allow_sweetness: true, allow_addons: true, is_active: true
                },
                { 
                    id: 6, name: '‡∏ä‡∏≤‡πÑ‡∏ó‡∏¢', category: 'tea', price: 50, image: 'üçµ', 
                    allow_size: true, allow_temperature: true, allow_sweetness: true, allow_addons: true, is_active: true
                },
                { 
                    id: 7, name: '‡∏ä‡∏≤‡∏ô‡∏°', category: 'tea', price: 55, image: 'üçµ', 
                    allow_size: true, allow_temperature: true, allow_sweetness: true, allow_addons: true, is_active: true
                },
                { 
                    id: 8, name: '‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï‡∏£‡πâ‡∏≠‡∏ô', category: 'chocolate', price: 60, image: 'üç´', 
                    allow_size: true, allow_temperature: true, allow_sweetness: true, allow_addons: true, is_active: true
                },
                { 
                    id: 9, name: '‡πÇ‡∏Å‡πÇ‡∏Å‡πâ', category: 'chocolate', price: 55, image: 'üç´', 
                    allow_size: true, allow_temperature: true, allow_sweetness: true, allow_addons: true, is_active: true
                },
                { 
                    id: 10, name: '‡∏ô‡∏°‡∏™‡∏î', category: 'milk', price: 45, image: 'ü•õ', 
                    allow_size: true, allow_temperature: false, allow_sweetness: false, allow_addons: false, is_active: true
                },
                { 
                    id: 11, name: '‡∏ô‡∏°‡∏ä‡∏°‡∏û‡∏π', category: 'milk', price: 50, image: 'ü•õ', 
                    allow_size: true, allow_temperature: false, allow_sweetness: false, allow_addons: false, is_active: true
                },
                { 
                    id: 12, name: '‡∏Ñ‡∏£‡∏±‡∏ß‡∏ã‡∏≠‡∏á‡∏Ñ‡πå', category: 'bakery', price: 65, image: 'ü•ê', 
                    allow_size: false, allow_temperature: false, allow_sweetness: false, allow_addons: false, is_active: true
                },
                { 
                    id: 13, name: '‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ä‡πá‡∏≠‡∏Å‡πÇ‡∏Å‡πÅ‡∏•‡∏ï', category: 'bakery', price: 85, image: 'üç∞', 
                    allow_size: false, allow_temperature: false, allow_sweetness: false, allow_addons: false, is_active: true
                },
                { 
                    id: 14, name: '‡∏Ñ‡∏∏‡∏Å‡∏Å‡∏µ‡πâ', category: 'bakery', price: 35, image: 'üç™', 
                    allow_size: false, allow_temperature: false, allow_sweetness: false, allow_addons: false, is_active: true
                }
            ],

            addons: [
                { id: 1, name: '‡∏ß‡∏¥‡∏õ‡∏Ñ‡∏£‡∏µ‡∏°', price: 15, category: 'topping', is_active: true },
                { id: 2, name: '‡πÑ‡∏Ç‡πà‡∏°‡∏∏‡∏Å', price: 20, category: 'topping', is_active: true },
                { id: 3, name: '‡∏ß‡∏∏‡πâ‡∏ô‡∏°‡∏∞‡∏û‡∏£‡πâ‡∏≤‡∏ß', price: 15, category: 'topping', is_active: true },
                { id: 4, name: '‡∏Ñ‡∏≤‡∏£‡∏≤‡πÄ‡∏°‡∏•', price: 10, category: 'syrup', is_active: true },
                { id: 5, name: '‡∏ß‡∏≤‡∏ô‡∏¥‡∏•‡∏•‡∏≤', price: 10, category: 'syrup', is_active: true },
                { id: 6, name: '‡∏Æ‡∏≤‡πÄ‡∏ã‡∏•‡∏ô‡∏±‡∏ó', price: 10, category: 'syrup', is_active: true },
                { id: 7, name: '‡∏ä‡πá‡∏≠‡∏ï‡πÄ‡∏≠‡∏™‡πÄ‡∏û‡∏£‡∏™‡πÇ‡∏ã', price: 20, category: 'extra', is_active: true },
                { id: 8, name: '‡∏ô‡πâ‡∏≥‡∏ú‡∏∂‡πâ‡∏á', price: 10, category: 'sweetener', is_active: true }
            ],

            orders: [],
            cashDrawer: null,

            // Categories Management
            async getCategories() {
                return new Promise(resolve => {
                    setTimeout(() => resolve(this.categories.filter(c => c.is_active)), 100);
                });
            },

            async addCategory(category) {
                return new Promise(resolve => {
                    const newCategory = {
                        ...category,
                        id: Math.max(...this.categories.map(c => c.id)) + 1,
                        is_active: true
                    };
                    this.categories.push(newCategory);
                    setTimeout(() => resolve({ success: true, data: newCategory }), 100);
                });
            },

            async updateCategory(id, updates) {
                return new Promise(resolve => {
                    const index = this.categories.findIndex(c => c.id === id);
                    if (index !== -1) {
                        this.categories[index] = { ...this.categories[index], ...updates };
                        setTimeout(() => resolve({ success: true, data: this.categories[index] }), 100);
                    } else {
                        setTimeout(() => resolve({ success: false, error: 'Category not found' }), 100);
                    }
                });
            },

            async deleteCategory(id) {
                return new Promise(resolve => {
                    const index = this.categories.findIndex(c => c.id === id);
                    if (index !== -1) {
                        this.categories[index].is_active = false;
                        setTimeout(() => resolve({ success: true }), 100);
                    } else {
                        setTimeout(() => resolve({ success: false, error: 'Category not found' }), 100);
                    }
                });
            },

            // Menu Items Management
            async getMenuItems() {
                return new Promise(resolve => {
                    setTimeout(() => resolve(this.menuItems.filter(m => m.is_active)), 100);
                });
            },

            async addMenuItem(item) {
                return new Promise(resolve => {
                    const newItem = {
                        ...item,
                        id: Math.max(...this.menuItems.map(m => m.id)) + 1,
                        is_active: true
                    };
                    this.menuItems.push(newItem);
                    setTimeout(() => resolve({ success: true, data: newItem }), 100);
                });
            },

            async updateMenuItem(id, updates) {
                return new Promise(resolve => {
                    const index = this.menuItems.findIndex(m => m.id === id);
                    if (index !== -1) {
                        this.menuItems[index] = { ...this.menuItems[index], ...updates };
                        setTimeout(() => resolve({ success: true, data: this.menuItems[index] }), 100);
                    } else {
                        setTimeout(() => resolve({ success: false, error: 'Item not found' }), 100);
                    }
                });
            },

            async deleteMenuItem(id) {
                return new Promise(resolve => {
                    const index = this.menuItems.findIndex(m => m.id === id);
                    if (index !== -1) {
                        this.menuItems[index].is_active = false;
                        setTimeout(() => resolve({ success: true }), 100);
                    } else {
                        setTimeout(() => resolve({ success: false, error: 'Item not found' }), 100);
                    }
                });
            },

            // Addons Management
            async getMenuAddons() {
                return new Promise(resolve => {
                    setTimeout(() => resolve(this.addons.filter(a => a.is_active)), 100);
                });
            },

            async addAddon(addon) {
                return new Promise(resolve => {
                    const newAddon = {
                        ...addon,
                        id: Math.max(...this.addons.map(a => a.id)) + 1,
                        is_active: true
                    };
                    this.addons.push(newAddon);
                    setTimeout(() => resolve({ success: true, data: newAddon }), 100);
                });
            },

            async updateAddon(id, updates) {
                return new Promise(resolve => {
                    const index = this.addons.findIndex(a => a.id === id);
                    if (index !== -1) {
                        this.addons[index] = { ...this.addons[index], ...updates };
                        setTimeout(() => resolve({ success: true, data: this.addons[index] }), 100);
                    } else {
                        setTimeout(() => resolve({ success: false, error: 'Addon not found' }), 100);
                    }
                });
            },

            async deleteAddon(id) {
                return new Promise(resolve => {
                    const index = this.addons.findIndex(a => a.id === id);
                    if (index !== -1) {
                        this.addons[index].is_active = false;
                        setTimeout(() => resolve({ success: true }), 100);
                    } else {
                        setTimeout(() => resolve({ success: false, error: 'Addon not found' }), 100);
                    }
                });
            },

            // Orders Management
            async createOrder(orderData, userId) {
                return new Promise(resolve => {
                    const order = {
                        id: Date.now(),
                        order_number: `ORD${Date.now().toString().slice(-8)}`,
                        ...orderData,
                        created_at: new Date().toISOString(),
                        user_id: userId,
                        users: { name: 'Demo User' },
                        is_deleted: false,
                        order_items: orderData.items.map(item => ({
                            ...item,
                            id: Date.now() + Math.random()
                        }))
                    };
                    this.orders.push(order);
                    setTimeout(() => resolve({ success: true, data: order }), 100);
                });
            },

            async getOrders(date) {
                return new Promise(resolve => {
                    const dateStr = new Date(date).toDateString();
                    const filtered = this.orders.filter(order => 
                        new Date(order.created_at).toDateString() === dateStr && !order.is_deleted
                    );
                    setTimeout(() => resolve(filtered), 100);
                });
            },

            async updateOrder(orderId, updates) {
                return new Promise(resolve => {
                    const index = this.orders.findIndex(o => o.id === orderId);
                    if (index !== -1) {
                        this.orders[index] = { ...this.orders[index], ...updates };
                        setTimeout(() => resolve({ success: true, data: this.orders[index] }), 100);
                    } else {
                        setTimeout(() => resolve({ success: false, error: 'Order not found' }), 100);
                    }
                });
            },

            async deleteOrder(orderId) {
                return new Promise(resolve => {
                    const index = this.orders.findIndex(o => o.id === orderId);
                    if (index !== -1) {
                        this.orders[index].is_deleted = true;
                        setTimeout(() => resolve({ success: true }), 100);
                    } else {
                        setTimeout(() => resolve({ success: false, error: 'Order not found' }), 100);
                    }
                });
            },

            // Cash Drawer Management
            async getTodaysCashDrawer() {
                return new Promise(resolve => {
                    setTimeout(() => resolve(this.cashDrawer), 100);
                });
            },

            async openCashDrawer(userId, initialAmount) {
                return new Promise(resolve => {
                    if (this.cashDrawer && !this.cashDrawer.is_closed) {
                        setTimeout(() => resolve({ success: false, error: '‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å‡∏ñ‡∏π‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ' }), 100);
                    } else {
                        this.cashDrawer = {
                            id: Date.now(),
                            opening_amount: initialAmount,
                            open_time: new Date().toISOString(),
                            is_closed: false,
                            user_id: userId
                        };
                        setTimeout(() => resolve({ success: true, data: this.cashDrawer }), 100);
                    }
                });
            },

            async closeCashDrawer(drawerId, closingAmount, userId) {
                return new Promise(resolve => {
                    if (this.cashDrawer && this.cashDrawer.id === drawerId) {
                        this.cashDrawer = {
                            ...this.cashDrawer,
                            closing_amount: closingAmount,
                            close_time: new Date().toISOString(),
                            is_closed: true,
                            closing_user_id: userId
                        };
                    }
                    setTimeout(() => resolve({ success: true, data: this.cashDrawer }), 100);
                });
            },

            async getCashDrawerSummary(drawerId) {
                return new Promise(resolve => {
                    const cashSales = this.orders
                        .filter(o => o.paymentMethod === 'cash' && !o.is_deleted)
                        .reduce((sum, o) => sum + o.total, 0);
                    
                    const summary = {
                        ...this.cashDrawer,
                        cashSales,
                        expectedAmount: (this.cashDrawer?.opening_amount || 0) + cashSales
                    };
                    setTimeout(() => resolve(summary), 100);
                });
            },

            // Sales Report
            async getSalesReport(startDate, endDate) {
                return new Promise(resolve => {
                    const filtered = this.orders.filter(order => {
                        const orderDate = new Date(order.created_at);
                        return orderDate >= startDate && orderDate <= endDate && !order.is_deleted;
                    });

                    const orderItems = [];
                    filtered.forEach(order => {
                        if (order.order_items) {
                            order.order_items.forEach(item => {
                                orderItems.push({
                                    ...item,
                                    menu_items: this.menuItems.find(m => m.id === item.id)
                                });
                            });
                        }
                    });

                    setTimeout(() => resolve({ orders: filtered, orderItems }), 100);
                });
            }
        };

        // ==================== Auth Context ====================
        const AuthContext = createContext(null);

        const AuthProvider = ({ children }) => {
            const [user, setUser] = useState({ id: 1, name: 'Demo Admin', role: 'admin', email: 'admin@coffee.shop' });
            const [loading, setLoading] = useState(false);

            const login = async (email, password) => {
                const userData = { id: 1, name: 'Demo Admin', role: 'admin', email };
                setUser(userData);
                return { success: true };
            };

            const logout = () => {
                setUser(null);
            };

            return (
                <AuthContext.Provider value={{ user, login, logout, loading }}>
                    {children}
                </AuthContext.Provider>
            );
        };

        const useAuth = () => useContext(AuthContext);

        // ==================== Component: Toast ====================
        const Toast = ({ message, type = 'success', onClose }) => {
            useEffect(() => {
                const timer = setTimeout(onClose, 3000);
                return () => clearTimeout(timer);
            }, [onClose]);

            const bgColor = type === 'success' ? 'bg-green-500' : 
                           type === 'error' ? 'bg-red-500' : 
                           'bg-blue-500';

            return (
                <div className={`fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg slide-in z-50`}>
                    <div className="flex items-center">
                        <i className={`fas fa-${type === 'success' ? 'check' : 'exclamation'}-circle mr-2`}></i>
                        {message}
                    </div>
                </div>
            );
        };

        // ==================== Component: Category Management ====================
        const CategoryManagement = () => {
            const [categories, setCategories] = useState([]);
            const [editingCategory, setEditingCategory] = useState(null);
            const [showAddForm, setShowAddForm] = useState(false);
            const [loading, setLoading] = useState(true);
            const [toast, setToast] = useState(null);
            
            const [formData, setFormData] = useState({
                name: '',
                code: '',
                icon: '',
                display_order: 1
            });

            useEffect(() => {
                loadCategories();
            }, []);

            const loadCategories = async () => {
                setLoading(true);
                const data = await DatabaseService.getCategories();
                setCategories(data);
                setLoading(false);
            };

            const handleSave = async () => {
                if (!formData.name || !formData.code) {
                    setToast({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö', type: 'error' });
                    return;
                }

                let result;
                if (editingCategory) {
                    result = await DatabaseService.updateCategory(editingCategory.id, formData);
                } else {
                    result = await DatabaseService.addCategory(formData);
                }

                if (result.success) {
                    setToast({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                    await loadCategories();
                    resetForm();
                } else {
                    setToast({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.error, type: 'error' });
                }
            };

            const handleDelete = async (id, name) => {
                if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà "${name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
                    const result = await DatabaseService.deleteCategory(id);
                    if (result.success) {
                        setToast({ message: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                        await loadCategories();
                    }
                }
            };

            const resetForm = () => {
                setEditingCategory(null);
                setShowAddForm(false);
                setFormData({
                    name: '',
                    code: '',
                    icon: '',
                    display_order: 1
                });
            };

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    {toast && (
                        <Toast 
                            message={toast.message} 
                            type={toast.type} 
                            onClose={() => setToast(null)} 
                        />
                    )}

                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">
                            <i className="fas fa-tags mr-2"></i>
                            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                        </h2>
                        <button
                            onClick={() => setShowAddForm(true)}
                            className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                        >
                            <i className="fas fa-plus mr-2"></i>
                            ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
                        </button>
                    </div>

                    {(showAddForm || editingCategory) && (
                        <div className="mb-6 p-4 border-2 border-amber-200 rounded-lg bg-amber-50">
                            <h3 className="font-bold mb-4 text-lg">
                                {editingCategory ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡πÉ‡∏´‡∏°‡πà'}
                            </h3>
                            <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                                <input
                                    type="text"
                                    placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"
                                    value={formData.name}
                                    onChange={(e) => setFormData({...formData, name: e.target.value})}
                                    className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                />
                                <input
                                    type="text"
                                    placeholder="‡∏£‡∏´‡∏±‡∏™‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà (eng)"
                                    value={formData.code}
                                    onChange={(e) => setFormData({...formData, code: e.target.value.toLowerCase()})}
                                    className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                />
                                <input
                                    type="text"
                                    placeholder="‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô/‡∏≠‡∏µ‡πÇ‡∏°‡∏à‡∏¥"
                                    value={formData.icon}
                                    onChange={(e) => setFormData({...formData, icon: e.target.value})}
                                    className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                />
                                <input
                                    type="number"
                                    placeholder="‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á"
                                    value={formData.display_order}
                                    onChange={(e) => setFormData({...formData, display_order: parseInt(e.target.value)})}
                                    className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                />
                            </div>
                            <div className="flex gap-2 mt-4">
                                <button
                                    onClick={handleSave}
                                    className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                                >
                                    <i className="fas fa-save mr-2"></i>
                                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                </button>
                                <button
                                    onClick={resetForm}
                                    className="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400"
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                            </div>
                        </div>
                    )}

                    {loading ? (
                        <div className="flex items-center justify-center py-8">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                        </div>
                    ) : (
                        <div className="overflow-x-auto">
                            <table className="w-full">
                                <thead>
                                    <tr className="border-b bg-gray-50">
                                        <th className="text-left py-3 px-2">‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô</th>
                                        <th className="text-left py-3">‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                                        <th className="text-left py-3">‡∏£‡∏´‡∏±‡∏™</th>
                                        <th className="text-center py-3">‡∏•‡∏≥‡∏î‡∏±‡∏ö</th>
                                        <th className="text-center py-3">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                    </tr>
                                </thead>
                                <tbody>
                                    {categories.map(cat => (
                                        <tr key={cat.id} className="border-b hover:bg-gray-50">
                                            <td className="py-3 text-2xl px-2">{cat.icon}</td>
                                            <td className="py-3 font-medium">{cat.name}</td>
                                            <td className="py-3">{cat.code}</td>
                                            <td className="py-3 text-center">{cat.display_order}</td>
                                            <td className="py-3 text-center">
                                                <button
                                                    onClick={() => {
                                                        setEditingCategory(cat);
                                                        setFormData({
                                                            name: cat.name,
                                                            code: cat.code,
                                                            icon: cat.icon,
                                                            display_order: cat.display_order
                                                        });
                                                    }}
                                                    className="text-blue-600 hover:text-blue-800 mr-3"
                                                >
                                                    <i className="fas fa-edit"></i>
                                                </button>
                                                <button
                                                    onClick={() => handleDelete(cat.id, cat.name)}
                                                    className="text-red-600 hover:text-red-800"
                                                >
                                                    <i className="fas fa-trash"></i>
                                                </button>
                                            </td>
                                        </tr>
                                    ))}
                                </tbody>
                            </table>
                        </div>
                    )}
                </div>
            );
        };

        // ==================== Component: Menu Management ====================
        const MenuManagement = () => {
            const [menuItems, setMenuItems] = useState([]);
            const [addons, setAddons] = useState([]);
            const [categories, setCategories] = useState([]);
            const [editingItem, setEditingItem] = useState(null);
            const [editingAddon, setEditingAddon] = useState(null);
            const [showAddForm, setShowAddForm] = useState(false);
            const [showAddonForm, setShowAddonForm] = useState(false);
            const [activeTab, setActiveTab] = useState('menu');
            const [loading, setLoading] = useState(true);
            const [toast, setToast] = useState(null);

            const [formData, setFormData] = useState({
                name: '',
                category: 'coffee',
                price: '',
                image: '‚òï',
                allow_size: true,
                allow_temperature: true,
                allow_sweetness: true,
                allow_addons: true
            });

            const [addonFormData, setAddonFormData] = useState({
                name: '',
                price: '',
                category: 'topping'
            });

            useEffect(() => {
                loadData();
            }, []);

            const loadData = async () => {
                setLoading(true);
                const [items, addonsList, cats] = await Promise.all([
                    DatabaseService.getMenuItems(),
                    DatabaseService.getMenuAddons(),
                    DatabaseService.getCategories()
                ]);
                setMenuItems(items);
                setAddons(addonsList);
                setCategories(cats);
                setLoading(false);
            };

            const handleSaveMenu = async () => {
                if (!formData.name || !formData.price) {
                    setToast({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö', type: 'error' });
                    return;
                }

                let result;
                if (editingItem) {
                    result = await DatabaseService.updateMenuItem(editingItem.id, {
                        ...formData,
                        price: parseFloat(formData.price)
                    });
                } else {
                    result = await DatabaseService.addMenuItem({
                        ...formData,
                        price: parseFloat(formData.price)
                    });
                }

                if (result.success) {
                    setToast({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                    await loadData();
                    resetMenuForm();
                } else {
                    setToast({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.error, type: 'error' });
                }
            };

            const handleSaveAddon = async () => {
                if (!addonFormData.name || !addonFormData.price) {
                    setToast({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö', type: 'error' });
                    return;
                }

                let result;
                if (editingAddon) {
                    result = await DatabaseService.updateAddon(editingAddon.id, {
                        ...addonFormData,
                        price: parseFloat(addonFormData.price)
                    });
                } else {
                    result = await DatabaseService.addAddon({
                        ...addonFormData,
                        price: parseFloat(addonFormData.price)
                    });
                }

                if (result.success) {
                    setToast({ message: '‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                    await loadData();
                    resetAddonForm();
                } else {
                    setToast({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.error, type: 'error' });
                }
            };

            const handleDeleteMenu = async (id, name) => {
                if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
                    const result = await DatabaseService.deleteMenuItem(id);
                    if (result.success) {
                        setToast({ message: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                        await loadData();
                    }
                }
            };

            const handleDeleteAddon = async (id, name) => {
                if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö "${name}" ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
                    const result = await DatabaseService.deleteAddon(id);
                    if (result.success) {
                        setToast({ message: '‡∏•‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                        await loadData();
                    }
                }
            };

            const resetMenuForm = () => {
                setEditingItem(null);
                setShowAddForm(false);
                setFormData({
                    name: '',
                    category: 'coffee',
                    price: '',
                    image: '‚òï',
                    allow_size: true,
                    allow_temperature: true,
                    allow_sweetness: true,
                    allow_addons: true
                });
            };

            const resetAddonForm = () => {
                setEditingAddon(null);
                setShowAddonForm(false);
                setAddonFormData({
                    name: '',
                    price: '',
                    category: 'topping'
                });
            };

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    {toast && (
                        <Toast 
                            message={toast.message} 
                            type={toast.type} 
                            onClose={() => setToast(null)} 
                        />
                    )}

                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">
                            <i className="fas fa-coffee mr-2"></i>
                            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π
                        </h2>
                    </div>

                    <div className="flex gap-2 mb-6 border-b">
                        <button
                            onClick={() => setActiveTab('menu')}
                            className={`px-4 py-2 font-medium transition-all ${
                                activeTab === 'menu'
                                    ? 'text-amber-600 border-b-2 border-amber-600'
                                    : 'text-gray-600 hover:text-amber-600'
                            }`}
                        >
                            ‡πÄ‡∏°‡∏ô‡∏π‡∏´‡∏•‡∏±‡∏Å
                        </button>
                        <button
                            onClick={() => setActiveTab('addons')}
                            className={`px-4 py-2 font-medium transition-all ${
                                activeTab === 'addons'
                                    ? 'text-amber-600 border-b-2 border-amber-600'
                                    : 'text-gray-600 hover:text-amber-600'
                            }`}
                        >
                            ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°
                        </button>
                    </div>

                    {activeTab === 'menu' && (
                        <div>
                            <div className="flex justify-end mb-4">
                                <button
                                    onClick={() => setShowAddForm(true)}
                                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                                >
                                    <i className="fas fa-plus mr-2"></i>
                                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π
                                </button>
                            </div>

                            {(showAddForm || editingItem) && (
                                <div className="mb-6 p-4 border-2 border-amber-200 rounded-lg bg-amber-50">
                                    <h3 className="font-bold mb-4 text-lg">
                                        {editingItem ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÄ‡∏°‡∏ô‡∏π' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏°‡∏ô‡∏π‡πÉ‡∏´‡∏°‡πà'}
                                    </h3>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <input
                                            type="text"
                                            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π"
                                            value={formData.name}
                                            onChange={(e) => setFormData({...formData, name: e.target.value})}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        />
                                        <select
                                            value={formData.category}
                                            onChange={(e) => {
                                                const cat = categories.find(c => c.code === e.target.value);
                                                setFormData({
                                                    ...formData, 
                                                    category: e.target.value,
                                                    image: cat ? cat.icon : '‚òï'
                                                });
                                            }}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        >
                                            {categories.map(cat => (
                                                <option key={cat.id} value={cat.code}>
                                                    {cat.name}
                                                </option>
                                            ))}
                                        </select>
                                        <input
                                            type="number"
                                            placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô"
                                            value={formData.price}
                                            onChange={(e) => setFormData({...formData, price: e.target.value})}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        />
                                        <div className="flex items-center gap-4">
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    checked={formData.allow_size}
                                                    onChange={(e) => setFormData({...formData, allow_size: e.target.checked})}
                                                    className="mr-2"
                                                />
                                                ‡∏Ç‡∏ô‡∏≤‡∏î
                                            </label>
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    checked={formData.allow_temperature}
                                                    onChange={(e) => setFormData({...formData, allow_temperature: e.target.checked})}
                                                    className="mr-2"
                                                />
                                                ‡∏£‡πâ‡∏≠‡∏ô/‡πÄ‡∏¢‡πá‡∏ô
                                            </label>
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    checked={formData.allow_sweetness}
                                                    onChange={(e) => setFormData({...formData, allow_sweetness: e.target.checked})}
                                                    className="mr-2"
                                                />
                                                ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô
                                            </label>
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    checked={formData.allow_addons}
                                                    onChange={(e) => setFormData({...formData, allow_addons: e.target.checked})}
                                                    className="mr-2"
                                                />
                                                ‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á
                                            </label>
                                        </div>
                                    </div>
                                    <div className="flex gap-2 mt-4">
                                        <button
                                            onClick={handleSaveMenu}
                                            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                                        >
                                            <i className="fas fa-save mr-2"></i>
                                            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                        </button>
                                        <button
                                            onClick={resetMenuForm}
                                            className="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400"
                                        >
                                            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                        </button>
                                    </div>
                                </div>
                            )}

                            {loading ? (
                                <div className="flex items-center justify-center py-8">
                                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                                </div>
                            ) : (
                                <div className="overflow-x-auto">
                                    <table className="w-full">
                                        <thead>
                                            <tr className="border-b bg-gray-50">
                                                <th className="text-left py-3 px-2">‡∏£‡∏π‡∏õ</th>
                                                <th className="text-left py-3">‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏°‡∏ô‡∏π</th>
                                                <th className="text-left py-3">‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà</th>
                                                <th className="text-center py-3">‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                                                <th className="text-right py-3">‡∏£‡∏≤‡∏Ñ‡∏≤</th>
                                                <th className="text-center py-3">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {menuItems.map(item => (
                                                <tr key={item.id} className="border-b hover:bg-gray-50">
                                                    <td className="py-3 text-2xl px-2">{item.image}</td>
                                                    <td className="py-3 font-medium">{item.name}</td>
                                                    <td className="py-3">
                                                        <span className="px-2 py-1 bg-gray-100 rounded-full text-sm">
                                                            {item.category}
                                                        </span>
                                                    </td>
                                                    <td className="py-3 text-center">
                                                        <div className="flex justify-center gap-1 flex-wrap">
                                                            {item.allow_size && <span className="text-xs bg-blue-100 px-2 py-1 rounded">‡∏Ç‡∏ô‡∏≤‡∏î</span>}
                                                            {item.allow_temperature && <span className="text-xs bg-orange-100 px-2 py-1 rounded">‡∏£‡πâ‡∏≠‡∏ô/‡πÄ‡∏¢‡πá‡∏ô</span>}
                                                            {item.allow_sweetness && <span className="text-xs bg-green-100 px-2 py-1 rounded">‡∏´‡∏ß‡∏≤‡∏ô</span>}
                                                            {item.allow_addons && <span className="text-xs bg-purple-100 px-2 py-1 rounded">‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á</span>}
                                                        </div>
                                                    </td>
                                                    <td className="py-3 text-right font-bold text-amber-600">
                                                        ‡∏ø{parseFloat(item.price).toFixed(2)}
                                                    </td>
                                                    <td className="py-3 text-center">
                                                        <button
                                                            onClick={() => {
                                                                setEditingItem(item);
                                                                setFormData({
                                                                    name: item.name,
                                                                    category: item.category,
                                                                    price: item.price.toString(),
                                                                    image: item.image,
                                                                    allow_size: item.allow_size,
                                                                    allow_temperature: item.allow_temperature,
                                                                    allow_sweetness: item.allow_sweetness,
                                                                    allow_addons: item.allow_addons
                                                                });
                                                            }}
                                                            className="text-blue-600 hover:text-blue-800 mr-3"
                                                        >
                                                            <i className="fas fa-edit"></i>
                                                        </button>
                                                        <button
                                                            onClick={() => handleDeleteMenu(item.id, item.name)}
                                                            className="text-red-600 hover:text-red-800"
                                                        >
                                                            <i className="fas fa-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            )}
                        </div>
                    )}

                    {activeTab === 'addons' && (
                        <div>
                            <div className="flex justify-end mb-4">
                                <button
                                    onClick={() => setShowAddonForm(true)}
                                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                                >
                                    <i className="fas fa-plus mr-2"></i>
                                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
                                </button>
                            </div>

                            {(showAddonForm || editingAddon) && (
                                <div className="mb-6 p-4 border-2 border-amber-200 rounded-lg bg-amber-50">
                                    <h3 className="font-bold mb-4 text-lg">
                                        {editingAddon ? '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å' : '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÉ‡∏´‡∏°‡πà'}
                                    </h3>
                                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                        <input
                                            type="text"
                                            placeholder="‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å"
                                            value={addonFormData.name}
                                            onChange={(e) => setAddonFormData({...addonFormData, name: e.target.value})}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        />
                                        <input
                                            type="number"
                                            placeholder="‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°"
                                            value={addonFormData.price}
                                            onChange={(e) => setAddonFormData({...addonFormData, price: e.target.value})}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        />
                                        <select
                                            value={addonFormData.category}
                                            onChange={(e) => setAddonFormData({...addonFormData, category: e.target.value})}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        >
                                            <option value="topping">‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á</option>
                                            <option value="syrup">‡πÑ‡∏ã‡∏£‡∏±‡∏õ</option>
                                            <option value="extra">‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©</option>
                                            <option value="sweetener">‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô</option>
                                        </select>
                                    </div>
                                    <div className="flex gap-2 mt-4">
                                        <button
                                            onClick={handleSaveAddon}
                                            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                                        >
                                            <i className="fas fa-save mr-2"></i>
                                            ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                        </button>
                                        <button
                                            onClick={resetAddonForm}
                                            className="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400"
                                        >
                                            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                        </button>
                                    </div>
                                </div>
                            )}

                            {loading ? (
                                <div className="flex items-center justify-center py-8">
                                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                                </div>
                            ) : (
                                <div className="overflow-x-auto">
                                    <table className="w-full">
                                        <thead>
                                            <tr className="border-b bg-gray-50">
                                                <th className="text-left py-3">‡∏ä‡∏∑‡πà‡∏≠‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</th>
                                                <th className="text-left py-3">‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó</th>
                                                <th className="text-right py-3">‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°</th>
                                                <th className="text-center py-3">‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            {addons.map(addon => (
                                                <tr key={addon.id} className="border-b hover:bg-gray-50">
                                                    <td className="py-3 font-medium">{addon.name}</td>
                                                    <td className="py-3">
                                                        <span className="px-2 py-1 bg-gray-100 rounded-full text-sm">
                                                            {addon.category === 'topping' ? '‡∏ó‡πá‡∏≠‡∏õ‡∏õ‡∏¥‡πâ‡∏á' :
                                                             addon.category === 'syrup' ? '‡πÑ‡∏ã‡∏£‡∏±‡∏õ' :
                                                             addon.category === 'extra' ? '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏û‡∏¥‡πÄ‡∏®‡∏©' :
                                                             '‡∏™‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô'}
                                                        </span>
                                                    </td>
                                                    <td className="py-3 text-right font-bold text-amber-600">
                                                        +‡∏ø{parseFloat(addon.price).toFixed(2)}
                                                    </td>
                                                    <td className="py-3 text-center">
                                                        <button
                                                            onClick={() => {
                                                                setEditingAddon(addon);
                                                                setAddonFormData({
                                                                    name: addon.name,
                                                                    price: addon.price.toString(),
                                                                    category: addon.category
                                                                });
                                                            }}
                                                            className="text-blue-600 hover:text-blue-800 mr-3"
                                                        >
                                                            <i className="fas fa-edit"></i>
                                                        </button>
                                                        <button
                                                            onClick={() => handleDeleteAddon(addon.id, addon.name)}
                                                            className="text-red-600 hover:text-red-800"
                                                        >
                                                            <i className="fas fa-trash"></i>
                                                        </button>
                                                    </td>
                                                </tr>
                                            ))}
                                        </tbody>
                                    </table>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            );
        };

        // ==================== Component: Cash Drawer ====================
        const CashDrawerManagement = () => {
            const { user } = useAuth();
            const [drawerStatus, setDrawerStatus] = useState(null);
            const [openAmount, setOpenAmount] = useState('');
            const [closeAmount, setCloseAmount] = useState('');
            const [loading, setLoading] = useState(true);
            const [toast, setToast] = useState(null);
            const [summary, setSummary] = useState(null);

            useEffect(() => {
                checkDrawerStatus();
            }, []);

            const checkDrawerStatus = async () => {
                setLoading(true);
                const drawer = await DatabaseService.getTodaysCashDrawer();
                setDrawerStatus(drawer);
                
                if (drawer && !drawer.is_closed) {
                    const summaryData = await DatabaseService.getCashDrawerSummary(drawer.id);
                    setSummary(summaryData);
                }
                
                setLoading(false);
            };

            const handleOpenDrawer = async () => {
                if (!openAmount || parseFloat(openAmount) < 0) {
                    setToast({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å', type: 'error' });
                    return;
                }

                const result = await DatabaseService.openCashDrawer(user.id, parseFloat(openAmount));
                
                if (result.success) {
                    setToast({ message: '‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                    setOpenAmount('');
                    await checkDrawerStatus();
                } else {
                    setToast({ message: result.error, type: 'error' });
                }
            };

            const handleCloseDrawer = async () => {
                if (!closeAmount || parseFloat(closeAmount) < 0) {
                    setToast({ message: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å', type: 'error' });
                    return;
                }

                const result = await DatabaseService.closeCashDrawer(
                    drawerStatus.id, 
                    parseFloat(closeAmount), 
                    user.id
                );
                
                if (result.success) {
                    setToast({ message: '‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                    setCloseAmount('');
                    await checkDrawerStatus();
                } else {
                    setToast({ message: result.error, type: 'error' });
                }
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center py-8">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                    </div>
                );
            }

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    {toast && (
                        <Toast 
                            message={toast.message} 
                            type={toast.type} 
                            onClose={() => setToast(null)} 
                        />
                    )}

                    <div className="mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">
                            <i className="fas fa-cash-register mr-2"></i>
                            ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
                        </h2>
                    </div>

                    {!drawerStatus || drawerStatus.is_closed ? (
                        <div className="max-w-md mx-auto">
                            <div className="bg-yellow-50 border-2 border-yellow-200 rounded-lg p-6">
                                <h3 className="text-lg font-bold mb-4 text-yellow-800">
                                    <i className="fas fa-lock mr-2"></i>
                                    ‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                                </h3>
                                <div className="space-y-4">
                                    <div>
                                        <label className="block text-sm font-medium mb-2">
                                            ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å
                                        </label>
                                        <input
                                            type="number"
                                            value={openAmount}
                                            onChange={(e) => setOpenAmount(e.target.value)}
                                            className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                            placeholder="0.00"
                                        />
                                    </div>
                                    <button
                                        onClick={handleOpenDrawer}
                                        className="w-full py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 font-medium"
                                    >
                                        <i className="fas fa-unlock mr-2"></i>
                                        ‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å
                                    </button>
                                </div>
                            </div>
                        </div>
                    ) : (
                        <div>
                            <div className="bg-green-50 border-2 border-green-200 rounded-lg p-6 mb-6">
                                <h3 className="text-lg font-bold mb-4 text-green-800">
                                    <i className="fas fa-unlock-alt mr-2"></i>
                                    ‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å‡πÄ‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà
                                </h3>
                                
                                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                                    <div className="bg-white rounded-lg p-4">
                                        <div className="text-sm text-gray-600">‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏õ‡∏¥‡∏î</div>
                                        <div className="font-medium">
                                            {new Date(drawerStatus.open_time).toLocaleTimeString('th-TH')}
                                        </div>
                                    </div>
                                    <div className="bg-white rounded-lg p-4">
                                        <div className="text-sm text-gray-600">‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å</div>
                                        <div className="font-bold text-lg text-blue-600">
                                            ‡∏ø{parseFloat(drawerStatus.opening_amount).toFixed(2)}
                                        </div>
                                    </div>
                                    <div className="bg-white rounded-lg p-4">
                                        <div className="text-sm text-gray-600">‡∏ú‡∏π‡πâ‡πÄ‡∏õ‡∏¥‡∏î</div>
                                        <div className="font-medium">{user.name}</div>
                                    </div>
                                </div>

                                {summary && (
                                    <div className="bg-white rounded-lg p-4 mb-6">
                                        <h4 className="font-bold mb-3">‡∏™‡∏£‡∏∏‡∏õ‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</h4>
                                        <div className="space-y-2">
                                            <div className="flex justify-between">
                                                <span>‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å:</span>
                                                <span className="font-medium">
                                                    ‡∏ø{parseFloat(summary.opening_amount).toFixed(2)}
                                                </span>
                                            </div>
                                            <div className="flex justify-between">
                                                <span>‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î:</span>
                                                <span className="font-medium text-green-600">
                                                    +‡∏ø{summary.cashSales.toFixed(2)}
                                                </span>
                                            </div>
                                            <div className="border-t pt-2 flex justify-between font-bold">
                                                <span>‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡πÉ‡∏ô‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å:</span>
                                                <span className="text-lg text-blue-600">
                                                    ‡∏ø{summary.expectedAmount.toFixed(2)}
                                                </span>
                                            </div>
                                        </div>
                                    </div>
                                )}

                                <div className="max-w-md mx-auto">
                                    <div className="space-y-4">
                                        <div>
                                            <label className="block text-sm font-medium mb-2">
                                                ‡∏ô‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡πÉ‡∏ô‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å
                                            </label>
                                            <input
                                                type="number"
                                                value={closeAmount}
                                                onChange={(e) => setCloseAmount(e.target.value)}
                                                className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                                placeholder="0.00"
                                            />
                                        </div>

                                        {closeAmount && summary && (
                                            <div className="bg-gray-50 rounded-lg p-4">
                                                <div className="space-y-2">
                                                    <div className="flex justify-between">
                                                        <span>‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏ö‡πÑ‡∏î‡πâ:</span>
                                                        <span>‡∏ø{parseFloat(closeAmount).toFixed(2)}</span>
                                                    </div>
                                                    <div className="flex justify-between">
                                                        <span>‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ:</span>
                                                        <span>‡∏ø{summary.expectedAmount.toFixed(2)}</span>
                                                    </div>
                                                    <div className="border-t pt-2 flex justify-between font-bold">
                                                        <span>‡∏ú‡∏•‡∏ï‡πà‡∏≤‡∏á:</span>
                                                        <span className={
                                                            parseFloat(closeAmount) - summary.expectedAmount >= 0
                                                                ? 'text-green-600'
                                                                : 'text-red-600'
                                                        }>
                                                            {parseFloat(closeAmount) - summary.expectedAmount >= 0 ? '+' : ''}
                                                            ‡∏ø{(parseFloat(closeAmount) - summary.expectedAmount).toFixed(2)}
                                                        </span>
                                                    </div>
                                                </div>
                                            </div>
                                        )}

                                        <button
                                            onClick={handleCloseDrawer}
                                            className="w-full py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 font-medium"
                                        >
                                            <i className="fas fa-lock mr-2"></i>
                                            ‡∏õ‡∏¥‡∏î‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    )}
                </div>
            );
        };

        // ==================== Component: Sales History ====================
        const SalesHistory = () => {
            const [orders, setOrders] = useState([]);
            const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
            const [loading, setLoading] = useState(true);
            const [toast, setToast] = useState(null);
            const [editingOrder, setEditingOrder] = useState(null);

            useEffect(() => {
                loadOrders();
            }, [selectedDate]);

            const loadOrders = async () => {
                setLoading(true);
                const data = await DatabaseService.getOrders(selectedDate);
                setOrders(data);
                setLoading(false);
            };

            const handleDeleteOrder = async (orderId, orderNumber) => {
                if (confirm(`‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå ${orderNumber} ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?`)) {
                    const result = await DatabaseService.deleteOrder(orderId);
                    if (result.success) {
                        setToast({ message: '‡∏•‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                        await loadOrders();
                    } else {
                        setToast({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.error, type: 'error' });
                    }
                }
            };

            const handleEditOrder = async (orderId, updates) => {
                const result = await DatabaseService.updateOrder(orderId, updates);
                if (result.success) {
                    setToast({ message: '‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', type: 'success' });
                    await loadOrders();
                    setEditingOrder(null);
                } else {
                    setToast({ message: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ' + result.error, type: 'error' });
                }
            };

            const EditOrderModal = ({ order, onClose, onSave }) => {
                const [editedOrder, setEditedOrder] = useState({
                    paymentMethod: order.paymentMethod,
                    receivedAmount: order.receivedAmount || order.total,
                    total: order.total
                });

                const handleSave = () => {
                    const change = editedOrder.paymentMethod === 'cash' 
                        ? parseFloat(editedOrder.receivedAmount) - parseFloat(editedOrder.total)
                        : 0;
                    
                    onSave(order.id, {
                        ...editedOrder,
                        change
                    });
                };

                return (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                        <div className="bg-white rounded-xl p-6 max-w-md w-full m-4">
                            <h3 className="text-xl font-bold mb-4">
                                ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå #{order.order_number}
                            </h3>

                            <div className="space-y-4">
                                <div>
                                    <label className="block text-sm font-medium mb-2">‡∏ß‡∏¥‡∏ò‡∏µ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô</label>
                                    <select
                                        value={editedOrder.paymentMethod}
                                        onChange={(e) => setEditedOrder({...editedOrder, paymentMethod: e.target.value})}
                                        className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                    >
                                        <option value="cash">‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î</option>
                                        <option value="qr">QR Payment</option>
                                    </select>
                                </div>

                                <div>
                                    <label className="block text-sm font-medium mb-2">‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°</label>
                                    <input
                                        type="number"
                                        value={editedOrder.total}
                                        onChange={(e) => setEditedOrder({...editedOrder, total: parseFloat(e.target.value)})}
                                        className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                    />
                                </div>

                                {editedOrder.paymentMethod === 'cash' && (
                                    <>
                                        <div>
                                            <label className="block text-sm font-medium mb-2">‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô</label>
                                            <input
                                                type="number"
                                                value={editedOrder.receivedAmount}
                                                onChange={(e) => setEditedOrder({...editedOrder, receivedAmount: parseFloat(e.target.value)})}
                                                className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                            />
                                        </div>
                                        <div className="bg-gray-50 p-3 rounded-lg">
                                            <div className="flex justify-between">
                                                <span>‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô:</span>
                                                <span className="font-bold text-green-600">
                                                    ‡∏ø{(parseFloat(editedOrder.receivedAmount) - parseFloat(editedOrder.total)).toFixed(2)}
                                                </span>
                                            </div>
                                        </div>
                                    </>
                                )}
                            </div>

                            <div className="grid grid-cols-2 gap-3 mt-6">
                                <button
                                    onClick={onClose}
                                    className="py-2 bg-gray-200 rounded-lg hover:bg-gray-300"
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                                <button
                                    onClick={handleSave}
                                    className="py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700"
                                >
                                    ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å
                                </button>
                            </div>
                        </div>
                    </div>
                );
            };

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    {toast && (
                        <Toast 
                            message={toast.message} 
                            type={toast.type} 
                            onClose={() => setToast(null)} 
                        />
                    )}

                    {editingOrder && (
                        <EditOrderModal
                            order={editingOrder}
                            onClose={() => setEditingOrder(null)}
                            onSave={handleEditOrder}
                        />
                    )}

                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">
                            <i className="fas fa-history mr-2"></i>
                            ‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢
                        </h2>
                        <input
                            type="date"
                            value={selectedDate}
                            onChange={(e) => setSelectedDate(e.target.value)}
                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                        />
                    </div>

                    {loading ? (
                        <div className="flex items-center justify-center py-8">
                            <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                        </div>
                    ) : orders.length === 0 ? (
                        <div className="text-center text-gray-400 py-8">
                            <i className="fas fa-receipt text-4xl mb-2"></i>
                            <p>‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å</p>
                        </div>
                    ) : (
                        <div className="space-y-4">
                            {orders.map(order => (
                                <div key={order.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                    <div className="flex justify-between items-start mb-3">
                                        <div>
                                            <div className="font-bold text-lg">
                                                #{order.order_number}
                                            </div>
                                            <div className="text-sm text-gray-500">
                                                {new Date(order.created_at).toLocaleTimeString('th-TH')}
                                                {order.users && (
                                                    <span className="ml-2">
                                                        <i className="fas fa-user mr-1"></i>
                                                        {order.users.name}
                                                    </span>
                                                )}
                                            </div>
                                        </div>
                                        <div className="flex items-start gap-2">
                                            <div className="text-right">
                                                <div className="font-bold text-xl text-amber-600">
                                                    ‡∏ø{parseFloat(order.total).toFixed(2)}
                                                </div>
                                                <div className="text-sm">
                                                    {order.paymentMethod === 'cash' ? 'üíµ ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î' : 'üì± QR'}
                                                </div>
                                            </div>
                                            <div className="flex gap-1">
                                                <button
                                                    onClick={() => setEditingOrder(order)}
                                                    className="px-2 py-1 text-blue-600 hover:bg-blue-50 rounded"
                                                    title="‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"
                                                >
                                                    <i className="fas fa-edit"></i>
                                                </button>
                                                <button
                                                    onClick={() => handleDeleteOrder(order.id, order.order_number)}
                                                    className="px-2 py-1 text-red-600 hover:bg-red-50 rounded"
                                                    title="‡∏•‡∏ö"
                                                >
                                                    <i className="fas fa-trash"></i>
                                                </button>
                                            </div>
                                        </div>
                                    </div>
                                    
                                    {order.order_items && (
                                        <div className="border-t pt-3">
                                            {order.order_items.map((item, idx) => (
                                                <div key={idx} className="flex justify-between text-sm mb-1">
                                                    <span>
                                                        {item.name} 
                                                        {item.temperature && ` (${item.temperature})`}
                                                        {item.size && ` Size: ${item.size}`}
                                                        {item.sweetness && ` | ‡∏´‡∏ß‡∏≤‡∏ô: ${item.sweetness}`}
                                                        {' '}x {item.quantity}
                                                    </span>
                                                    <span className="font-medium">
                                                        ‡∏ø{parseFloat(item.subtotal || 0).toFixed(2)}
                                                    </span>
                                                </div>
                                            ))}
                                        </div>
                                    )}
                                    
                                    {order.paymentMethod === 'cash' && (
                                        <div className="mt-3 pt-3 border-t text-sm">
                                            <div className="flex justify-between">
                                                <span>‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô:</span>
                                                <span>‡∏ø{parseFloat(order.receivedAmount).toFixed(2)}</span>
                                            </div>
                                            <div className="flex justify-between text-green-600 font-medium">
                                                <span>‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô:</span>
                                                <span>‡∏ø{parseFloat(order.change || 0).toFixed(2)}</span>
                                            </div>
                                        </div>
                                    )}
                                </div>
                            ))}
                        </div>
                    )}
                </div>
            );
        };

        // ==================== Component: Sales Report ====================
        const SalesReport = () => {
            const [dateRange, setDateRange] = useState('today');
            const [customStartDate, setCustomStartDate] = useState('');
            const [customEndDate, setCustomEndDate] = useState('');
            const [reportData, setReportData] = useState(null);
            const [loading, setLoading] = useState(true);
            const [viewMode, setViewMode] = useState('summary');

            useEffect(() => {
                const dates = getDateRange();
                loadReport(dates.start, dates.end);
            }, [dateRange]);

            const getDateRange = () => {
                const today = new Date();
                let start = new Date();
                let end = new Date();

                switch (dateRange) {
                    case 'today':
                        start = new Date(today);
                        end = new Date(today);
                        break;
                    case 'week':
                        start = new Date(today);
                        start.setDate(today.getDate() - 7);
                        end = new Date(today);
                        break;
                    case 'month':
                        start = new Date(today.getFullYear(), today.getMonth(), 1);
                        end = new Date(today.getFullYear(), today.getMonth() + 1, 0);
                        break;
                    case 'custom':
                        start = customStartDate ? new Date(customStartDate) : new Date();
                        end = customEndDate ? new Date(customEndDate) : new Date();
                        break;
                }

                start.setHours(0, 0, 0, 0);
                end.setHours(23, 59, 59, 999);

                return { start, end };
            };

            const loadReport = async (startDate, endDate) => {
                setLoading(true);
                const data = await DatabaseService.getSalesReport(startDate, endDate);
                const processedData = processReportData(data);
                setReportData(processedData);
                setLoading(false);
            };

            const processReportData = (data) => {
                const { orders, orderItems } = data;
                
                const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.total), 0);
                const totalOrders = orders.length;
                const avgOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;
                
                const dailySales = {};
                orders.forEach(order => {
                    const date = new Date(order.created_at).toISOString().split('T')[0];
                    if (!dailySales[date]) {
                        dailySales[date] = { revenue: 0, orders: 0 };
                    }
                    dailySales[date].revenue += parseFloat(order.total);
                    dailySales[date].orders += 1;
                });
                
                return {
                    summary: {
                        totalRevenue,
                        totalOrders,
                        avgOrderValue
                    },
                    dailySales
                };
            };

            if (loading) {
                return (
                    <div className="flex items-center justify-center py-8">
                        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                    </div>
                );
            }

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">
                            <i className="fas fa-chart-line mr-2"></i>
                            ‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢
                        </h2>
                        
                        <div className="flex flex-wrap items-center gap-2">
                            <button
                                onClick={() => setDateRange('today')}
                                className={`px-4 py-2 rounded-lg ${
                                    dateRange === 'today'
                                        ? 'bg-amber-600 text-white'
                                        : 'bg-gray-100 hover:bg-gray-200'
                                }`}
                            >
                                ‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ
                            </button>
                            <button
                                onClick={() => setDateRange('week')}
                                className={`px-4 py-2 rounded-lg ${
                                    dateRange === 'week'
                                        ? 'bg-amber-600 text-white'
                                        : 'bg-gray-100 hover:bg-gray-200'
                                }`}
                            >
                                7 ‡∏ß‡∏±‡∏ô
                            </button>
                            <button
                                onClick={() => setDateRange('month')}
                                className={`px-4 py-2 rounded-lg ${
                                    dateRange === 'month'
                                        ? 'bg-amber-600 text-white'
                                        : 'bg-gray-100 hover:bg-gray-200'
                                }`}
                            >
                                ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
                            </button>
                        </div>
                    </div>

                    {reportData && (
                        <div>
                            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                                <div className="bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-6">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <p className="text-gray-600 text-sm">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏ß‡∏°</p>
                                            <p className="text-3xl font-bold text-green-600">
                                                ‡∏ø{reportData.summary.totalRevenue.toFixed(2)}
                                            </p>
                                        </div>
                                        <div className="text-4xl text-green-500">üí∞</div>
                                    </div>
                                </div>
                                
                                <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-6">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <p className="text-gray-600 text-sm">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</p>
                                            <p className="text-3xl font-bold text-blue-600">
                                                {reportData.summary.totalOrders}
                                            </p>
                                        </div>
                                        <div className="text-4xl text-blue-500">üìã</div>
                                    </div>
                                </div>
                                
                                <div className="bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-6">
                                    <div className="flex items-center justify-between">
                                        <div>
                                            <p className="text-gray-600 text-sm">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</p>
                                            <p className="text-3xl font-bold text-purple-600">
                                                ‡∏ø{reportData.summary.avgOrderValue.toFixed(2)}
                                            </p>
                                        </div>
                                        <div className="text-4xl text-purple-500">üìä</div>
                                    </div>
                                </div>
                            </div>

                            {Object.keys(reportData.dailySales).length > 0 && (
                                <div className="bg-gray-50 rounded-lg p-6">
                                    <h3 className="text-xl font-bold mb-4">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô</h3>
                                    <div className="overflow-x-auto">
                                        <table className="w-full">
                                            <thead>
                                                <tr className="border-b bg-white">
                                                    <th className="text-left py-3">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà</th>
                                                    <th className="text-center py-3">‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå</th>
                                                    <th className="text-right py-3">‡∏¢‡∏≠‡∏î‡∏Ç‡∏≤‡∏¢</th>
                                                </tr>
                                            </thead>
                                            <tbody>
                                                {Object.entries(reportData.dailySales)
                                                    .sort((a, b) => b[0].localeCompare(a[0]))
                                                    .map(([date, data]) => (
                                                        <tr key={date} className="border-b bg-white">
                                                            <td className="py-3">
                                                                {new Date(date).toLocaleDateString('th-TH', {
                                                                    weekday: 'long',
                                                                    year: 'numeric',
                                                                    month: 'long',
                                                                    day: 'numeric'
                                                                })}
                                                            </td>
                                                            <td className="py-3 text-center">{data.orders}</td>
                                                            <td className="py-3 text-right font-bold text-amber-600">
                                                                ‡∏ø{data.revenue.toFixed(2)}
                                                            </td>
                                                        </tr>
                                                    ))}
                                            </tbody>
                                        </table>
                                    </div>
                                </div>
                            )}
                        </div>
                    )}
                </div>
            );
        };

        // ==================== Component: POS Screen ====================
        const POSScreen = () => {
            const { user } = useAuth();
            const [menuItems, setMenuItems] = useState([]);
            const [categories, setCategories] = useState([]);
            const [addons, setAddons] = useState([]);
            const [cart, setCart] = useState([]);
            const [selectedCategory, setSelectedCategory] = useState('all');
            const [showPayment, setShowPayment] = useState(false);
            const [paymentMethod, setPaymentMethod] = useState('cash');
            const [receivedAmount, setReceivedAmount] = useState('');
            const [loading, setLoading] = useState(true);
            const [toast, setToast] = useState(null);
            const [selectedItem, setSelectedItem] = useState(null);
            const [showCustomization, setShowCustomization] = useState(false);

            useEffect(() => {
                loadData();
            }, []);

            const loadData = async () => {
                setLoading(true);
                const [items, cats, addonsList] = await Promise.all([
                    DatabaseService.getMenuItems(),
                    DatabaseService.getCategories(),
                    DatabaseService.getMenuAddons()
                ]);
                setMenuItems(items);
                setCategories([
                    { id: 'all', name: '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', icon: 'üìã', code: 'all' },
                    ...cats
                ]);
                setAddons(addonsList);
                setLoading(false);
            };

            const filteredItems = selectedCategory === 'all' 
                ? menuItems 
                : menuItems.filter(item => item.category === selectedCategory);

            const handleItemClick = (item) => {
                if (!item.allow_size && !item.allow_temperature && !item.allow_sweetness && !item.allow_addons) {
                    addToCart({
                        ...item,
                        size: 'M',
                        temperature: 'hot',
                        sweetness: '100%',
                        selectedAddons: []
                    });
                } else {
                    setSelectedItem({
                        ...item,
                        size: 'M',
                        temperature: 'hot',
                        sweetness: '100%',
                        selectedAddons: []
                    });
                    setShowCustomization(true);
                }
            };

            const addToCart = (itemWithOptions) => {
                const cartId = Date.now();
                const subtotal = calculateItemPrice(itemWithOptions);
                
                const cartItem = {
                    ...itemWithOptions,
                    cartId,
                    quantity: 1,
                    subtotal,
                    addons: itemWithOptions.selectedAddons
                };

                setCart([...cart, cartItem]);
                setToast({ message: `‡πÄ‡∏û‡∏¥‡πà‡∏° ${itemWithOptions.name} ‡πÅ‡∏•‡πâ‡∏ß`, type: 'success' });
                setShowCustomization(false);
                setSelectedItem(null);
            };

            const calculateItemPrice = (item) => {
                let price = parseFloat(item.price);
                if (item.size === 'L') price += 10;
                if (item.selectedAddons && item.selectedAddons.length > 0) {
                    item.selectedAddons.forEach(addon => {
                        price += parseFloat(addon.price);
                    });
                }
                return price;
            };

            const updateCartItem = (cartId, updates) => {
                setCart(cart.map(item => {
                    if (item.cartId === cartId) {
                        const updated = { ...item, ...updates };
                        updated.subtotal = calculateItemPrice(updated) * updated.quantity;
                        return updated;
                    }
                    return item;
                }));
            };

            const removeFromCart = (cartId) => {
                setCart(cart.filter(item => item.cartId !== cartId));
            };

            const getTotalPrice = () => {
                return cart.reduce((total, item) => total + item.subtotal, 0);
            };

            const handlePayment = async () => {
                if (cart.length === 0) return;
                
                const change = paymentMethod === 'cash' 
                    ? parseFloat(receivedAmount || 0) - getTotalPrice() 
                    : 0;

                if (paymentMethod === 'cash' && change < 0) {
                    setToast({ message: '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÑ‡∏°‡πà‡∏û‡∏≠', type: 'error' });
                    return;
                }

                const orderData = {
                    items: cart,
                    total: getTotalPrice(),
                    paymentMethod,
                    receivedAmount: paymentMethod === 'cash' ? parseFloat(receivedAmount) : getTotalPrice(),
                    change
                };

                const result = await DatabaseService.createOrder(orderData, user.id);

                if (result.success) {
                    setToast({ 
                        message: `‡∏Å‡∏≤‡∏£‡∏Ç‡∏≤‡∏¢‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ${paymentMethod === 'cash' ? `‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: ${change.toFixed(2)} ‡∏ö‡∏≤‡∏ó` : ''}`, 
                        type: 'success' 
                    });
                    
                    setCart([]);
                    setShowPayment(false);
                    setReceivedAmount('');
                    setPaymentMethod('cash');
                }
            };

            // Customization Modal
            const CustomizationModal = () => {
                if (!selectedItem) return null;

                const [tempItem, setTempItem] = useState(selectedItem);

                const toggleAddon = (addon) => {
                    const existing = tempItem.selectedAddons.find(a => a.id === addon.id);
                    if (existing) {
                        setTempItem({
                            ...tempItem,
                            selectedAddons: tempItem.selectedAddons.filter(a => a.id !== addon.id)
                        });
                    } else {
                        setTempItem({
                            ...tempItem,
                            selectedAddons: [...tempItem.selectedAddons, addon]
                        });
                    }
                };

                const totalPrice = calculateItemPrice(tempItem);

                return (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                        <div className="bg-white rounded-xl p-6 max-w-md w-full m-4 max-h-[90vh] overflow-y-auto">
                            <h3 className="text-xl font-bold mb-4">
                                {tempItem.image} {tempItem.name}
                            </h3>

                            {tempItem.allow_temperature && (
                                <div className="mb-4">
                                    <label className="block text-sm font-medium mb-2">‡∏≠‡∏∏‡∏ì‡∏´‡∏†‡∏π‡∏°‡∏¥</label>
                                    <div className="grid grid-cols-3 gap-2">
                                        {['hot', 'cold', 'frappe'].map(temp => (
                                            <button
                                                key={temp}
                                                onClick={() => setTempItem({...tempItem, temperature: temp})}
                                                className={`py-2 rounded-lg border-2 transition-all ${
                                                    tempItem.temperature === temp
                                                        ? 'border-amber-500 bg-amber-50'
                                                        : 'border-gray-200 hover:border-gray-300'
                                                }`}
                                            >
                                                {temp === 'hot' ? 'üî• ‡∏£‡πâ‡∏≠‡∏ô' :
                                                 temp === 'cold' ? 'üßä ‡πÄ‡∏¢‡πá‡∏ô' :
                                                 'ü•§ ‡∏õ‡∏±‡πà‡∏ô'}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {tempItem.allow_size && (
                                <div className="mb-4">
                                    <label className="block text-sm font-medium mb-2">‡∏Ç‡∏ô‡∏≤‡∏î</label>
                                    <div className="grid grid-cols-3 gap-2">
                                        {['S', 'M', 'L'].map(size => (
                                            <button
                                                key={size}
                                                onClick={() => setTempItem({...tempItem, size})}
                                                className={`py-2 rounded-lg border-2 transition-all ${
                                                    tempItem.size === size
                                                        ? 'border-amber-500 bg-amber-50'
                                                        : 'border-gray-200 hover:border-gray-300'
                                                }`}
                                            >
                                                {size}
                                                {size === 'L' && ' (+10‡∏ø)'}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {tempItem.allow_sweetness && (
                                <div className="mb-4">
                                    <label className="block text-sm font-medium mb-2">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏´‡∏ß‡∏≤‡∏ô</label>
                                    <select
                                        value={tempItem.sweetness}
                                        onChange={(e) => setTempItem({...tempItem, sweetness: e.target.value})}
                                        className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                    >
                                        <option value="0%">0% - ‡πÑ‡∏°‡πà‡∏´‡∏ß‡∏≤‡∏ô</option>
                                        <option value="25%">25% - ‡∏´‡∏ß‡∏≤‡∏ô‡∏ô‡πâ‡∏≠‡∏¢</option>
                                        <option value="50%">50% - ‡∏´‡∏ß‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á</option>
                                        <option value="75%">75% - ‡∏´‡∏ß‡∏≤‡∏ô‡∏°‡∏≤‡∏Å</option>
                                        <option value="100%">100% - ‡∏´‡∏ß‡∏≤‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥</option>
                                    </select>
                                </div>
                            )}

                            {tempItem.allow_addons && addons.length > 0 && (
                                <div className="mb-4">
                                    <label className="block text-sm font-medium mb-2">‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°</label>
                                    <div className="space-y-2 max-h-40 overflow-y-auto">
                                        {addons.map(addon => (
                                            <label
                                                key={addon.id}
                                                className="flex items-center justify-between p-2 border rounded-lg hover:bg-gray-50 cursor-pointer"
                                            >
                                                <div className="flex items-center">
                                                    <input
                                                        type="checkbox"
                                                        checked={tempItem.selectedAddons.some(a => a.id === addon.id)}
                                                        onChange={() => toggleAddon(addon)}
                                                        className="mr-3"
                                                    />
                                                    <span>{addon.name}</span>
                                                </div>
                                                <span className="text-amber-600">+{parseFloat(addon.price).toFixed(0)}‡∏ø</span>
                                            </label>
                                        ))}
                                    </div>
                                </div>
                            )}

                            <div className="border-t pt-4 mb-4">
                                <div className="flex justify-between text-lg font-bold">
                                    <span>‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏°:</span>
                                    <span className="text-amber-600">‡∏ø{totalPrice.toFixed(2)}</span>
                                </div>
                            </div>

                            <div className="grid grid-cols-2 gap-3">
                                <button
                                    onClick={() => {
                                        setShowCustomization(false);
                                        setSelectedItem(null);
                                    }}
                                    className="py-2 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors"
                                >
                                    ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                </button>
                                <button
                                    onClick={() => addToCart(tempItem)}
                                    className="py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors"
                                >
                                    ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤
                                </button>
                            </div>
                        </div>
                    </div>
                );
            };

            return (
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-full">
                    {toast && (
                        <Toast 
                            message={toast.message} 
                            type={toast.type} 
                            onClose={() => setToast(null)} 
                        />
                    )}

                    {showCustomization && <CustomizationModal />}

                    <div className="lg:col-span-2 bg-white rounded-lg shadow-lg p-4">
                        <div className="flex gap-2 mb-4 overflow-x-auto scrollbar-hide">
                            {categories.map(cat => (
                                <button
                                    key={cat.id}
                                    onClick={() => setSelectedCategory(cat.code)}
                                    className={`px-4 py-2 rounded-lg whitespace-nowrap transition-all ${
                                        selectedCategory === cat.code
                                            ? 'bg-amber-600 text-white shadow-lg transform scale-105'
                                            : 'bg-gray-100 hover:bg-gray-200'
                                    }`}
                                >
                                    <span className="mr-2">{cat.icon}</span>
                                    {cat.name}
                                </button>
                            ))}
                        </div>

                        {loading ? (
                            <div className="flex items-center justify-center py-8">
                                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                            </div>
                        ) : (
                            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 overflow-y-auto" 
                                 style={{maxHeight: 'calc(100vh - 250px)'}}>
                                {filteredItems.map(item => (
                                    <button
                                        key={item.id}
                                        onClick={() => handleItemClick(item)}
                                        className="bg-white border-2 border-gray-200 rounded-lg p-4 hover:border-amber-500 hover:shadow-lg transition-all transform hover:scale-105"
                                    >
                                        <div className="text-3xl mb-2">{item.image}</div>
                                        <div className="font-medium text-sm">{item.name}</div>
                                        <div className="text-amber-600 font-bold">‡∏ø{parseFloat(item.price).toFixed(2)}</div>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>

                    <div className="bg-white rounded-lg shadow-lg p-4 flex flex-col">
                        <h3 className="text-xl font-bold mb-4 text-gray-800">
                            <i className="fas fa-shopping-cart mr-2"></i>
                            ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠
                        </h3>

                        <div className="flex-1 overflow-y-auto space-y-2 mb-4">
                            {cart.length === 0 ? (
                                <div className="text-center text-gray-400 py-8">
                                    <i className="fas fa-coffee text-4xl mb-2"></i>
                                    <p>‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£</p>
                                </div>
                            ) : (
                                cart.map(item => (
                                    <div key={item.cartId} className="border rounded-lg p-3 hover:shadow-md transition-shadow">
                                        <div className="flex justify-between items-start mb-2">
                                            <div className="flex-1">
                                                <div className="font-medium">{item.name}</div>
                                                <div className="text-sm text-gray-500">
                                                    {item.temperature && (
                                                        <span>
                                                            {item.temperature === 'hot' ? 'üî• ‡∏£‡πâ‡∏≠‡∏ô' :
                                                             item.temperature === 'cold' ? 'üßä ‡πÄ‡∏¢‡πá‡∏ô' :
                                                             'ü•§ ‡∏õ‡∏±‡πà‡∏ô'}
                                                        </span>
                                                    )}
                                                    {item.size && ` | Size: ${item.size}`}
                                                    {item.sweetness && ` | ‡∏´‡∏ß‡∏≤‡∏ô: ${item.sweetness}`}
                                                </div>
                                                {item.addons && item.addons.length > 0 && (
                                                    <div className="text-xs text-amber-600 mt-1">
                                                        + {item.addons.map(a => a.name).join(', ')}
                                                    </div>
                                                )}
                                            </div>
                                            <button
                                                onClick={() => removeFromCart(item.cartId)}
                                                className="text-red-500 hover:text-red-700 ml-2"
                                            >
                                                <i className="fas fa-trash"></i>
                                            </button>
                                        </div>

                                        <div className="flex items-center justify-between">
                                            <div className="flex items-center gap-2">
                                                <button
                                                    onClick={() => updateCartItem(item.cartId, { 
                                                        quantity: Math.max(1, item.quantity - 1) 
                                                    })}
                                                    className="w-7 h-7 bg-gray-200 rounded hover:bg-gray-300"
                                                >
                                                    -
                                                </button>
                                                <span className="w-8 text-center font-medium">{item.quantity}</span>
                                                <button
                                                    onClick={() => updateCartItem(item.cartId, { 
                                                        quantity: item.quantity + 1 
                                                    })}
                                                    className="w-7 h-7 bg-gray-200 rounded hover:bg-gray-300"
                                                >
                                                    +
                                                </button>
                                            </div>
                                            <span className="font-bold text-amber-600">
                                                ‡∏ø{item.subtotal.toFixed(2)}
                                            </span>
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>

                        <div className="border-t pt-4">
                            <div className="flex justify-between text-xl font-bold mb-4">
                                <span>‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:</span>
                                <span className="text-amber-600">‡∏ø{getTotalPrice().toFixed(2)}</span>
                            </div>

                            {!showPayment ? (
                                <button
                                    onClick={() => setShowPayment(true)}
                                    disabled={cart.length === 0}
                                    className={`w-full py-3 rounded-lg font-medium transition-all ${
                                        cart.length > 0
                                            ? 'bg-amber-600 text-white hover:bg-amber-700'
                                            : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                                    }`}
                                >
                                    <i className="fas fa-credit-card mr-2"></i>
                                    ‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
                                </button>
                            ) : (
                                <div className="space-y-3">
                                    <div className="grid grid-cols-2 gap-2">
                                        <button
                                            onClick={() => setPaymentMethod('cash')}
                                            className={`py-2 rounded-lg transition-all ${
                                                paymentMethod === 'cash'
                                                    ? 'bg-green-600 text-white'
                                                    : 'bg-gray-200 hover:bg-gray-300'
                                            }`}
                                        >
                                            <i className="fas fa-money-bill mr-1"></i>
                                            ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î
                                        </button>
                                        <button
                                            onClick={() => setPaymentMethod('qr')}
                                            className={`py-2 rounded-lg transition-all ${
                                                paymentMethod === 'qr'
                                                    ? 'bg-blue-600 text-white'
                                                    : 'bg-gray-200 hover:bg-gray-300'
                                            }`}
                                        >
                                            <i className="fas fa-qrcode mr-1"></i>
                                            QR
                                        </button>
                                    </div>

                                    {paymentMethod === 'cash' && (
                                        <input
                                            type="number"
                                            placeholder="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö"
                                            value={receivedAmount}
                                            onChange={(e) => setReceivedAmount(e.target.value)}
                                            className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        />
                                    )}

                                    {paymentMethod === 'cash' && receivedAmount && (
                                        <div className="text-center bg-gray-50 py-2 rounded">
                                            <span className="text-gray-600">‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏≠‡∏ô: </span>
                                            <span className="font-bold text-lg text-green-600">
                                                ‡∏ø{Math.max(0, parseFloat(receivedAmount) - getTotalPrice()).toFixed(2)}
                                            </span>
                                        </div>
                                    )}

                                    <div className="grid grid-cols-2 gap-2">
                                        <button
                                            onClick={() => setShowPayment(false)}
                                            className="py-2 bg-gray-300 rounded-lg hover:bg-gray-400"
                                        >
                                            ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å
                                        </button>
                                        <button
                                            onClick={handlePayment}
                                            className="py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                                        >
                                            ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            );
        };

        // ==================== Main App Component ====================
        const CoffeePOSApp = () => {
            const { user, logout } = useAuth();
            const [currentPage, setCurrentPage] = useState('pos');

            const navigation = [
                { id: 'pos', name: '‡∏´‡∏ô‡πâ‡∏≤‡∏Ç‡∏≤‡∏¢', icon: 'fas fa-cash-register' },
                { id: 'menu', name: '‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏°‡∏ô‡∏π', icon: 'fas fa-coffee', adminOnly: true },
                { id: 'categories', name: '‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà', icon: 'fas fa-tags', adminOnly: true },
                { id: 'history', name: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥', icon: 'fas fa-history' },
                { id: 'report', name: '‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô', icon: 'fas fa-chart-line' },
                { id: 'drawer', name: '‡∏•‡∏¥‡πâ‡∏ô‡∏ä‡∏±‡∏Å', icon: 'fas fa-cash-register', adminOnly: true }
            ];

            const filteredNavigation = navigation.filter(nav => 
                !nav.adminOnly || (nav.adminOnly && user?.role === 'admin')
            );

            return (
                <div className="min-h-screen bg-gradient-to-br from-amber-50 to-orange-50">
                    <header className="bg-gradient-to-r from-amber-700 to-amber-600 text-white shadow-lg">
                        <div className="container mx-auto px-4 py-4">
                            <div className="flex items-center justify-between">
                                <h1 className="text-2xl font-bold">
                                    <i className="fas fa-mug-hot mr-2"></i>
                                    Coffee Shop POS Pro Plus
                                </h1>
                                <div className="flex items-center gap-4">
                                    <div className="text-sm">
                                        <i className="fas fa-user mr-2"></i>
                                        {user.name} ({user.role})
                                    </div>
                                    <button
                                        onClick={logout}
                                        className="px-3 py-1 bg-red-600 rounded hover:bg-red-700 transition-colors"
                                    >
                                        <i className="fas fa-sign-out-alt mr-2"></i>
                                        ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö
                                    </button>
                                </div>
                            </div>
                        </div>
                    </header>

                    <nav className="bg-white shadow-md sticky top-0 z-10">
                        <div className="container mx-auto px-4">
                            <div className="flex space-x-1 overflow-x-auto scrollbar-hide">
                                {filteredNavigation.map(nav => (
                                    <button
                                        key={nav.id}
                                        onClick={() => setCurrentPage(nav.id)}
                                        className={`px-4 py-3 font-medium transition-all whitespace-nowrap ${
                                            currentPage === nav.id
                                                ? 'text-amber-600 border-b-2 border-amber-600'
                                                : 'text-gray-600 hover:text-amber-600'
                                        }`}
                                    >
                                        <i className={`${nav.icon} mr-2`}></i>
                                        {nav.name}
                                    </button>
                                ))}
                            </div>
                        </div>
                    </nav>

                    <main className="container mx-auto px-4 py-6">
                        {currentPage === 'pos' && <POSScreen />}
                        {currentPage === 'menu' && user.role === 'admin' && <MenuManagement />}
                        {currentPage === 'categories' && user.role === 'admin' && <CategoryManagement />}
                        {currentPage === 'history' && <SalesHistory />}
                        {currentPage === 'report' && <SalesReport />}
                        {currentPage === 'drawer' && user.role === 'admin' && <CashDrawerManagement />}
                    </main>

                    <footer className="mt-auto bg-gray-800 text-white py-4 text-center">
                        <p className="text-sm">
                            ¬© 2024 Coffee Shop POS Pro Plus | Version 5.0 Full Features
                        </p>
                    </footer>
                </div>
            );
        };

        // ==================== Root App ====================
        const App = () => {
            return (
                <AuthProvider>
                    <CoffeePOSApp />
                </AuthProvider>
            );
        };

        // Render App
        ReactDOM.render(<App />, document.getElementById('root'));
    </script>
</body>
</html>
