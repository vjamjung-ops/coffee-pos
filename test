<!DOCTYPE html>
<html lang="th">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Coffee Shop POS Pro - ระบบขายหน้าร้านกาแฟ</title>
    
    <!-- React & Babel -->
    <script crossorigin src="https://unpkg.com/react@18/umd/react.production.min.js"></script>
    <script crossorigin src="https://unpkg.com/react-dom@18/umd/react-dom.production.min.js"></script>
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- Tailwind CSS -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- Font Awesome -->
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css">
    
    <!-- Supabase -->
    <script src="https://cdn.jsdelivr.net/npm/@supabase/supabase-js@2"></script>
    
    <!-- Chart.js for reports -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    
    <!-- Google Fonts -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@300;400;500;600;700&display=swap" rel="stylesheet">
    
    <style>
        body { 
            font-family: 'Kanit', sans-serif; 
        }
        .scrollbar-hide::-webkit-scrollbar { 
            display: none; 
        }
        .scrollbar-hide { 
            -ms-overflow-style: none; 
            scrollbar-width: none; 
        }
        @keyframes slideIn {
            from { transform: translateX(100%); }
            to { transform: translateX(0); }
        }
        .slide-in {
            animation: slideIn 0.3s ease-out;
        }
        @keyframes fadeIn {
            from { opacity: 0; }
            to { opacity: 1; }
        }
        .fade-in {
            animation: fadeIn 0.3s ease-out;
        }
    </style>
</head>
<body>
    <div id="root"></div>

    <script type="text/babel">
        const { useState, useEffect, useRef, useCallback, createContext, useContext } = React;

        // ==================== SUPABASE CONFIG ====================
        // ⚠️ แก้ไขค่าเหล่านี้ด้วยข้อมูลจาก Supabase Dashboard ของคุณ
        const SUPABASE_URL = 'https://twdzqzwnadcisufkhgon.supabase.co'; // แก้ไขที่นี่
        const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InR3ZHpxenduYWRjaXN1ZmtoZ29uIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ4MTQzOTQsImV4cCI6MjA3MDM5MDM5NH0.b0Q2b3qRg0gaoBXNGPPFxnFZcmfTKmM15SDi2Q6roPU'; // แก้ไขที่นี่
        
        // Initialize Supabase client
        const supabase = window.supabase.createClient(SUPABASE_URL, SUPABASE_ANON_KEY);

        // ==================== Auth Context ====================
        const AuthContext = createContext(null);

        const AuthProvider = ({ children }) => {
            const [user, setUser] = useState(null);
            const [loading, setLoading] = useState(true);

            useEffect(() => {
                // Check if user is logged in
                const storedUser = localStorage.getItem('coffee_pos_user');
                if (storedUser) {
                    setUser(JSON.parse(storedUser));
                }
                setLoading(false);
            }, []);

            const login = async (email, password) => {
                try {
                    const { data, error } = await supabase
                        .rpc('authenticate_user', {
                            user_email: email,
                            user_password: password
                        });

                    if (error) throw error;
                    
                    if (data && data.length > 0) {
                        const userData = data[0];
                        localStorage.setItem('coffee_pos_user', JSON.stringify(userData));
                        setUser(userData);
                        return { success: true };
                    } else {
                        return { success: false, error: 'อีเมลหรือรหัสผ่านไม่ถูกต้อง' };
                    }
                } catch (error) {
                    console.error('Login error:', error);
                    return { success: false, error: error.message };
                }
            };

            const logout = () => {
                localStorage.removeItem('coffee_pos_user');
                setUser(null);
            };

            return (
                <AuthContext.Provider value={{ user, login, logout, loading }}>
                    {children}
                </AuthContext.Provider>
            );
        };

        const useAuth = () => {
            const context = useContext(AuthContext);
            if (!context) {
                throw new Error('useAuth must be used within AuthProvider');
            }
            return context;
        };

        // ==================== Database Service ====================
        const DatabaseService = {
            // Menu Items
            async getMenuItems() {
                try {
                    const { data, error } = await supabase
                        .from('menu_items')
                        .select('*')
                        .eq('is_active', true)
                        .order('category', { ascending: true })
                        .order('name', { ascending: true });
                    
                    if (error) throw error;
                    return data || [];
                } catch (error) {
                    console.error('Error fetching menu items:', error);
                    return [];
                }
            },

            async getMenuAddons() {
                try {
                    const { data, error } = await supabase
                        .from('menu_addons')
                        .select('*')
                        .eq('is_active', true)
                        .order('category', { ascending: true })
                        .order('name', { ascending: true });
                    
                    if (error) throw error;
                    return data || [];
                } catch (error) {
                    console.error('Error fetching addons:', error);
                    return [];
                }
            },

            async addMenuItem(item) {
                try {
                    const { data, error } = await supabase
                        .from('menu_items')
                        .insert([item])
                        .select()
                        .single();
                    
                    if (error) throw error;
                    return { success: true, data };
                } catch (error) {
                    console.error('Error adding menu item:', error);
                    return { success: false, error: error.message };
                }
            },

            async updateMenuItem(id, updates) {
                try {
                    const { data, error } = await supabase
                        .from('menu_items')
                        .update({...updates, updated_at: new Date().toISOString()})
                        .eq('id', id)
                        .select()
                        .single();
                    
                    if (error) throw error;
                    return { success: true, data };
                } catch (error) {
                    console.error('Error updating menu item:', error);
                    return { success: false, error: error.message };
                }
            },

            async deleteMenuItem(id) {
                try {
                    const { error } = await supabase
                        .from('menu_items')
                        .update({ is_active: false })
                        .eq('id', id);
                    
                    if (error) throw error;
                    return { success: true };
                } catch (error) {
                    console.error('Error deleting menu item:', error);
                    return { success: false, error: error.message };
                }
            },

            // Addons
            async addAddon(addon) {
                try {
                    const { data, error } = await supabase
                        .from('menu_addons')
                        .insert([addon])
                        .select()
                        .single();
                    
                    if (error) throw error;
                    return { success: true, data };
                } catch (error) {
                    console.error('Error adding addon:', error);
                    return { success: false, error: error.message };
                }
            },

            async updateAddon(id, updates) {
                try {
                    const { data, error } = await supabase
                        .from('menu_addons')
                        .update(updates)
                        .eq('id', id)
                        .select()
                        .single();
                    
                    if (error) throw error;
                    return { success: true, data };
                } catch (error) {
                    console.error('Error updating addon:', error);
                    return { success: false, error: error.message };
                }
            },

            async deleteAddon(id) {
                try {
                    const { error } = await supabase
                        .from('menu_addons')
                        .update({ is_active: false })
                        .eq('id', id);
                    
                    if (error) throw error;
                    return { success: true };
                } catch (error) {
                    console.error('Error deleting addon:', error);
                    return { success: false, error: error.message };
                }
            },

            // Orders
            async createOrder(orderData, userId) {
                try {
                    const orderNumber = `ORD${Date.now().toString().slice(-8)}`;
                    
                    const { data: order, error: orderError } = await supabase
                        .from('orders')
                        .insert([{
                            order_number: orderNumber,
                            total: orderData.total,
                            payment_method: orderData.paymentMethod,
                            received_amount: orderData.receivedAmount,
                            change_amount: orderData.change,
                            user_id: userId
                        }])
                        .select()
                        .single();
                    
                    if (orderError) throw orderError;
                    
                    const orderItems = orderData.items.map(item => ({
                        order_id: order.id,
                        menu_item_id: item.id,
                        name: item.name,
                        price: item.price,
                        quantity: item.quantity,
                        size: item.size,
                        sweetness: item.sweetness,
                        addons: item.addons || [],
                        subtotal: item.subtotal
                    }));
                    
                    const { error: itemsError } = await supabase
                        .from('order_items')
                        .insert(orderItems);
                    
                    if (itemsError) throw itemsError;
                    
                    return { success: true, data: order };
                } catch (error) {
                    console.error('Error creating order:', error);
                    return { success: false, error: error.message };
                }
            },

            async getOrders(date) {
                try {
                    const startDate = new Date(date);
                    startDate.setHours(0, 0, 0, 0);
                    
                    const endDate = new Date(date);
                    endDate.setHours(23, 59, 59, 999);
                    
                    const { data, error } = await supabase
                        .from('orders')
                        .select(`
                            *,
                            order_items (*),
                            users (name)
                        `)
                        .eq('is_deleted', false)
                        .gte('created_at', startDate.toISOString())
                        .lte('created_at', endDate.toISOString())
                        .order('created_at', { ascending: false });
                    
                    if (error) throw error;
                    return data || [];
                } catch (error) {
                    console.error('Error fetching orders:', error);
                    return [];
                }
            },

            async updateOrder(orderId, updates) {
                try {
                    const { data, error } = await supabase
                        .from('orders')
                        .update({...updates, updated_at: new Date().toISOString()})
                        .eq('id', orderId)
                        .select()
                        .single();
                    
                    if (error) throw error;
                    return { success: true, data };
                } catch (error) {
                    console.error('Error updating order:', error);
                    return { success: false, error: error.message };
                }
            },

            async deleteOrder(orderId) {
                try {
                    const { error } = await supabase
                        .from('orders')
                        .update({ is_deleted: true })
                        .eq('id', orderId);
                    
                    if (error) throw error;
                    return { success: true };
                } catch (error) {
                    console.error('Error deleting order:', error);
                    return { success: false, error: error.message };
                }
            },

            async getSalesReport(startDate, endDate) {
                try {
                    // Get orders in date range
                    const { data: orders, error: ordersError } = await supabase
                        .from('orders')
                        .select('*')
                        .eq('is_deleted', false)
                        .gte('created_at', startDate.toISOString())
                        .lte('created_at', endDate.toISOString());
                    
                    if (ordersError) throw ordersError;

                    // Get order items for category analysis
                    const { data: orderItems, error: itemsError } = await supabase
                        .from('order_items')
                        .select(`
                            *,
                            orders!inner(is_deleted, created_at),
                            menu_items(category)
                        `)
                        .eq('orders.is_deleted', false)
                        .gte('orders.created_at', startDate.toISOString())
                        .lte('orders.created_at', endDate.toISOString());
                    
                    if (itemsError) throw itemsError;

                    return { orders, orderItems };
                } catch (error) {
                    console.error('Error fetching sales report:', error);
                    return { orders: [], orderItems: [] };
                }
            }
        };

        // ==================== Components ====================
        
        // Component: Login Screen
        const LoginScreen = () => {
            const { login } = useAuth();
            const [email, setEmail] = useState('');
            const [password, setPassword] = useState('');
            const [loading, setLoading] = useState(false);
            const [error, setError] = useState('');

            const handleLogin = async (e) => {
                e.preventDefault();
                setLoading(true);
                setError('');

                const result = await login(email, password);
                
                if (!result.success) {
                    setError(result.error);
                }
                
                setLoading(false);
            };

            return (
                <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-amber-50 to-orange-50">
                    <div className="bg-white rounded-2xl shadow-2xl p-8 w-full max-w-md">
                        <div className="text-center mb-8">
                            <div className="text-5xl mb-4">☕</div>
                            <h1 className="text-3xl font-bold text-gray-800">Coffee Shop POS</h1>
                            <p className="text-gray-600 mt-2">เข้าสู่ระบบเพื่อใช้งาน</p>
                        </div>

                        <form onSubmit={handleLogin} className="space-y-6">
                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    อีเมล
                                </label>
                                <input
                                    type="email"
                                    value={email}
                                    onChange={(e) => setEmail(e.target.value)}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-amber-500"
                                    placeholder="admin@coffee.shop"
                                    required
                                />
                            </div>

                            <div>
                                <label className="block text-sm font-medium text-gray-700 mb-2">
                                    รหัสผ่าน
                                </label>
                                <input
                                    type="password"
                                    value={password}
                                    onChange={(e) => setPassword(e.target.value)}
                                    className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:border-amber-500"
                                    placeholder="••••••••"
                                    required
                                />
                            </div>

                            {error && (
                                <div className="bg-red-50 text-red-600 p-3 rounded-lg text-sm">
                                    <i className="fas fa-exclamation-circle mr-2"></i>
                                    {error}
                                </div>
                            )}

                            <button
                                type="submit"
                                disabled={loading}
                                className={`w-full py-3 rounded-lg font-medium transition-all ${
                                    loading 
                                        ? 'bg-gray-400 cursor-not-allowed' 
                                        : 'bg-amber-600 hover:bg-amber-700 text-white'
                                }`}
                            >
                                {loading ? (
                                    <span>
                                        <i className="fas fa-spinner fa-spin mr-2"></i>
                                        กำลังเข้าสู่ระบบ...
                                    </span>
                                ) : (
                                    <span>
                                        <i className="fas fa-sign-in-alt mr-2"></i>
                                        เข้าสู่ระบบ
                                    </span>
                                )}
                            </button>
                        </form>

                        <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                            <p className="text-sm text-gray-600">
                                <strong>Demo Account:</strong><br/>
                                Email: admin@coffee.shop<br/>
                                Password: admin123
                            </p>
                        </div>
                    </div>
                </div>
            );
        };

        // Component: Toast Notification
        const Toast = ({ message, type = 'success', onClose }) => {
            useEffect(() => {
                const timer = setTimeout(onClose, 3000);
                return () => clearTimeout(timer);
            }, [onClose]);

            const bgColor = type === 'success' ? 'bg-green-500' : 
                           type === 'error' ? 'bg-red-500' : 
                           'bg-blue-500';

            return (
                <div className={`fixed top-4 right-4 ${bgColor} text-white px-6 py-3 rounded-lg shadow-lg slide-in z-50`}>
                    <div className="flex items-center">
                        <i className={`fas fa-${
                            type === 'success' ? 'check-circle' : 
                            type === 'error' ? 'exclamation-circle' : 
                            'info-circle'
                        } mr-2`}></i>
                        {message}
                    </div>
                </div>
            );
        };

        // Component: POS Screen with Addons
        const POSScreen = () => {
            const { user } = useAuth();
            const [menuItems, setMenuItems] = useState([]);
            const [addons, setAddons] = useState([]);
            const [cart, setCart] = useState([]);
            const [selectedCategory, setSelectedCategory] = useState('all');
            const [showPayment, setShowPayment] = useState(false);
            const [showCustomization, setShowCustomization] = useState(false);
            const [selectedItem, setSelectedItem] = useState(null);
            const [paymentMethod, setPaymentMethod] = useState('cash');
            const [receivedAmount, setReceivedAmount] = useState('');
            const [loading, setLoading] = useState(true);
            const [toast, setToast] = useState(null);
            const [processing, setProcessing] = useState(false);

            const categories = [
                { id: 'all', name: 'ทั้งหมด', icon: '📋' },
                { id: 'coffee', name: 'กาแฟ', icon: '☕' },
                { id: 'tea', name: 'ชา', icon: '🍵' },
                { id: 'chocolate', name: 'ช็อกโกแลต', icon: '🍫' },
                { id: 'milk', name: 'นม', icon: '🥛' },
                { id: 'bakery', name: 'เบเกอรี่', icon: '🥐' }
            ];

            useEffect(() => {
                loadData();
            }, []);

            const loadData = async () => {
                setLoading(true);
                const [items, addonsList] = await Promise.all([
                    DatabaseService.getMenuItems(),
                    DatabaseService.getMenuAddons()
                ]);
                setMenuItems(items);
                setAddons(addonsList);
                setLoading(false);
            };

            const filteredItems = selectedCategory === 'all' 
                ? menuItems 
                : menuItems.filter(item => item.category === selectedCategory);

            const handleItemClick = (item) => {
                if (item.category === 'bakery' || (!item.allow_size && !item.allow_sweetness && !item.allow_addons)) {
                    // Direct add to cart for bakery items
                    addToCart({
                        ...item,
                        size: 'M',
                        sweetness: '100%',
                        selectedAddons: []
                    });
                } else {
                    // Show customization modal
                    setSelectedItem({
                        ...item,
                        size: 'M',
                        sweetness: '100%',
                        selectedAddons: []
                    });
                    setShowCustomization(true);
                }
            };

            const addToCart = (itemWithOptions) => {
                const cartId = Date.now();
                const subtotal = calculateItemPrice(itemWithOptions);
                
                const cartItem = {
                    ...itemWithOptions,
                    cartId,
                    quantity: 1,
                    subtotal,
                    addons: itemWithOptions.selectedAddons
                };

                setCart([...cart, cartItem]);
                setToast({ message: `เพิ่ม ${itemWithOptions.name} แล้ว`, type: 'success' });
                setShowCustomization(false);
                setSelectedItem(null);
            };

            const calculateItemPrice = (item) => {
                let price = parseFloat(item.price);
                
                // Add size price
                if (item.size === 'L') price += 10;
                
                // Add addons price
                if (item.selectedAddons && item.selectedAddons.length > 0) {
                    item.selectedAddons.forEach(addon => {
                        price += parseFloat(addon.price);
                    });
                }
                
                return price;
            };

            const updateCartItem = (cartId, updates) => {
                setCart(cart.map(item => {
                    if (item.cartId === cartId) {
                        const updated = { ...item, ...updates };
                        updated.subtotal = calculateItemPrice(updated) * updated.quantity;
                        return updated;
                    }
                    return item;
                }));
            };

            const removeFromCart = (cartId) => {
                setCart(cart.filter(item => item.cartId !== cartId));
            };

            const getTotalPrice = () => {
                return cart.reduce((total, item) => total + item.subtotal, 0);
            };

            const handlePayment = async () => {
                if (cart.length === 0) return;
                
                const change = paymentMethod === 'cash' 
                    ? parseFloat(receivedAmount || 0) - getTotalPrice() 
                    : 0;

                if (paymentMethod === 'cash' && change < 0) {
                    setToast({ message: 'จำนวนเงินที่รับมาไม่พอ', type: 'error' });
                    return;
                }

                setProcessing(true);

                const orderData = {
                    items: cart,
                    total: getTotalPrice(),
                    paymentMethod,
                    receivedAmount: paymentMethod === 'cash' ? parseFloat(receivedAmount) : getTotalPrice(),
                    change
                };

                const result = await DatabaseService.createOrder(orderData, user.id);

                if (result.success) {
                    setToast({ 
                        message: `การขายสำเร็จ! ${paymentMethod === 'cash' ? `เงินทอน: ${change.toFixed(2)} บาท` : ''}`, 
                        type: 'success' 
                    });
                    
                    setCart([]);
                    setShowPayment(false);
                    setReceivedAmount('');
                    setPaymentMethod('cash');
                } else {
                    setToast({ message: 'เกิดข้อผิดพลาด: ' + result.error, type: 'error' });
                }

                setProcessing(false);
            };

            // Customization Modal
            const CustomizationModal = () => {
                if (!selectedItem) return null;

                const [tempItem, setTempItem] = useState(selectedItem);

                const toggleAddon = (addon) => {
                    const existing = tempItem.selectedAddons.find(a => a.id === addon.id);
                    if (existing) {
                        setTempItem({
                            ...tempItem,
                            selectedAddons: tempItem.selectedAddons.filter(a => a.id !== addon.id)
                        });
                    } else {
                        setTempItem({
                            ...tempItem,
                            selectedAddons: [...tempItem.selectedAddons, addon]
                        });
                    }
                };

                const totalPrice = calculateItemPrice(tempItem);

                return (
                    <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                        <div className="bg-white rounded-xl p-6 max-w-md w-full m-4 max-h-[90vh] overflow-y-auto">
                            <h3 className="text-xl font-bold mb-4">
                                {tempItem.image} {tempItem.name}
                            </h3>

                            {/* Size Selection */}
                            {tempItem.allow_size && (
                                <div className="mb-4">
                                    <label className="block text-sm font-medium mb-2">ขนาด</label>
                                    <div className="grid grid-cols-3 gap-2">
                                        {['S', 'M', 'L'].map(size => (
                                            <button
                                                key={size}
                                                onClick={() => setTempItem({...tempItem, size})}
                                                className={`py-2 rounded-lg border-2 transition-all ${
                                                    tempItem.size === size
                                                        ? 'border-amber-500 bg-amber-50'
                                                        : 'border-gray-200 hover:border-gray-300'
                                                }`}
                                            >
                                                {size}
                                                {size === 'L' && ' (+10฿)'}
                                            </button>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {/* Sweetness Selection */}
                            {tempItem.allow_sweetness && (
                                <div className="mb-4">
                                    <label className="block text-sm font-medium mb-2">ความหวาน</label>
                                    <select
                                        value={tempItem.sweetness}
                                        onChange={(e) => setTempItem({...tempItem, sweetness: e.target.value})}
                                        className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                    >
                                        <option value="0%">0% - ไม่หวาน</option>
                                        <option value="25%">25% - หวานน้อย</option>
                                        <option value="50%">50% - หวานกลาง</option>
                                        <option value="75%">75% - หวานมาก</option>
                                        <option value="100%">100% - หวานปกติ</option>
                                    </select>
                                </div>
                            )}

                            {/* Addons */}
                            {tempItem.allow_addons && addons.length > 0 && (
                                <div className="mb-4">
                                    <label className="block text-sm font-medium mb-2">เพิ่มเติม</label>
                                    <div className="space-y-2">
                                        {addons.map(addon => (
                                            <label
                                                key={addon.id}
                                                className="flex items-center justify-between p-2 border rounded-lg hover:bg-gray-50 cursor-pointer"
                                            >
                                                <div className="flex items-center">
                                                    <input
                                                        type="checkbox"
                                                        checked={tempItem.selectedAddons.some(a => a.id === addon.id)}
                                                        onChange={() => toggleAddon(addon)}
                                                        className="mr-3"
                                                    />
                                                    <span>{addon.name}</span>
                                                </div>
                                                <span className="text-amber-600">+{parseFloat(addon.price).toFixed(0)}฿</span>
                                            </label>
                                        ))}
                                    </div>
                                </div>
                            )}

                            {/* Total */}
                            <div className="border-t pt-4 mb-4">
                                <div className="flex justify-between text-lg font-bold">
                                    <span>ราคารวม:</span>
                                    <span className="text-amber-600">฿{totalPrice.toFixed(2)}</span>
                                </div>
                            </div>

                            {/* Buttons */}
                            <div className="grid grid-cols-2 gap-3">
                                <button
                                    onClick={() => {
                                        setShowCustomization(false);
                                        setSelectedItem(null);
                                    }}
                                    className="py-2 bg-gray-200 rounded-lg hover:bg-gray-300 transition-colors"
                                >
                                    ยกเลิก
                                </button>
                                <button
                                    onClick={() => addToCart(tempItem)}
                                    className="py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700 transition-colors"
                                >
                                    เพิ่มลงตะกร้า
                                </button>
                            </div>
                        </div>
                    </div>
                );
            };

            return (
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-4 h-full">
                    {toast && (
                        <Toast 
                            message={toast.message} 
                            type={toast.type} 
                            onClose={() => setToast(null)} 
                        />
                    )}

                    {showCustomization && <CustomizationModal />}

                    {/* Menu Section */}
                    <div className="lg:col-span-2 bg-white rounded-lg shadow-lg p-4">
                        {/* Categories */}
                        <div className="flex gap-2 mb-4 overflow-x-auto scrollbar-hide">
                            {categories.map(cat => (
                                <button
                                    key={cat.id}
                                    onClick={() => setSelectedCategory(cat.id)}
                                    className={`px-4 py-2 rounded-lg whitespace-nowrap transition-all ${
                                        selectedCategory === cat.id
                                            ? 'bg-amber-600 text-white shadow-lg transform scale-105'
                                            : 'bg-gray-100 hover:bg-gray-200'
                                    }`}
                                >
                                    <span className="mr-2">{cat.icon}</span>
                                    {cat.name}
                                </button>
                            ))}
                        </div>

                        {/* Menu Grid */}
                        {loading ? (
                            <div className="flex items-center justify-center py-8">
                                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                            </div>
                        ) : (
                            <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-3 overflow-y-auto" 
                                 style={{maxHeight: 'calc(100vh - 250px)'}}>
                                {filteredItems.map(item => (
                                    <button
                                        key={item.id}
                                        onClick={() => handleItemClick(item)}
                                        className="bg-white border-2 border-gray-200 rounded-lg p-4 hover:border-amber-500 hover:shadow-lg transition-all transform hover:scale-105"
                                    >
                                        <div className="text-3xl mb-2">{item.image}</div>
                                        <div className="font-medium text-sm">{item.name}</div>
                                        <div className="text-amber-600 font-bold">฿{parseFloat(item.price).toFixed(2)}</div>
                                    </button>
                                ))}
                            </div>
                        )}
                    </div>

                    {/* Cart Section */}
                    <div className="bg-white rounded-lg shadow-lg p-4 flex flex-col">
                        <h3 className="text-xl font-bold mb-4 text-gray-800">
                            <i className="fas fa-shopping-cart mr-2"></i>
                            รายการสั่งซื้อ
                        </h3>

                        {/* Cart Items */}
                        <div className="flex-1 overflow-y-auto space-y-2 mb-4">
                            {cart.length === 0 ? (
                                <div className="text-center text-gray-400 py-8">
                                    <i className="fas fa-coffee text-4xl mb-2"></i>
                                    <p>ยังไม่มีรายการ</p>
                                </div>
                            ) : (
                                cart.map(item => (
                                    <div key={item.cartId} className="border rounded-lg p-3 hover:shadow-md transition-shadow">
                                        <div className="flex justify-between items-start mb-2">
                                            <div className="flex-1">
                                                <div className="font-medium">{item.name}</div>
                                                <div className="text-sm text-gray-500">
                                                    {item.size && `Size: ${item.size}`}
                                                    {item.sweetness && ` | หวาน: ${item.sweetness}`}
                                                </div>
                                                {item.addons && item.addons.length > 0 && (
                                                    <div className="text-xs text-amber-600 mt-1">
                                                        + {item.addons.map(a => a.name).join(', ')}
                                                    </div>
                                                )}
                                            </div>
                                            <button
                                                onClick={() => removeFromCart(item.cartId)}
                                                className="text-red-500 hover:text-red-700 ml-2"
                                            >
                                                <i className="fas fa-trash"></i>
                                            </button>
                                        </div>

                                        {/* Quantity & Price */}
                                        <div className="flex items-center justify-between">
                                            <div className="flex items-center gap-2">
                                                <button
                                                    onClick={() => updateCartItem(item.cartId, { 
                                                        quantity: Math.max(1, item.quantity - 1) 
                                                    })}
                                                    className="w-7 h-7 bg-gray-200 rounded hover:bg-gray-300"
                                                >
                                                    -
                                                </button>
                                                <span className="w-8 text-center font-medium">{item.quantity}</span>
                                                <button
                                                    onClick={() => updateCartItem(item.cartId, { 
                                                        quantity: item.quantity + 1 
                                                    })}
                                                    className="w-7 h-7 bg-gray-200 rounded hover:bg-gray-300"
                                                >
                                                    +
                                                </button>
                                            </div>
                                            <span className="font-bold text-amber-600">
                                                ฿{item.subtotal.toFixed(2)}
                                            </span>
                                        </div>
                                    </div>
                                ))
                            )}
                        </div>

                        {/* Total & Payment */}
                        <div className="border-t pt-4">
                            <div className="flex justify-between text-xl font-bold mb-4">
                                <span>รวมทั้งหมด:</span>
                                <span className="text-amber-600">฿{getTotalPrice().toFixed(2)}</span>
                            </div>

                            {!showPayment ? (
                                <button
                                    onClick={() => setShowPayment(true)}
                                    disabled={cart.length === 0}
                                    className={`w-full py-3 rounded-lg font-medium transition-all ${
                                        cart.length > 0
                                            ? 'bg-amber-600 text-white hover:bg-amber-700'
                                            : 'bg-gray-200 text-gray-400 cursor-not-allowed'
                                    }`}
                                >
                                    <i className="fas fa-credit-card mr-2"></i>
                                    ชำระเงิน
                                </button>
                            ) : (
                                <div className="space-y-3">
                                    <div className="grid grid-cols-2 gap-2">
                                        <button
                                            onClick={() => setPaymentMethod('cash')}
                                            className={`py-2 rounded-lg transition-all ${
                                                paymentMethod === 'cash'
                                                    ? 'bg-green-600 text-white'
                                                    : 'bg-gray-200 hover:bg-gray-300'
                                            }`}
                                        >
                                            <i className="fas fa-money-bill mr-1"></i>
                                            เงินสด
                                        </button>
                                        <button
                                            onClick={() => setPaymentMethod('qr')}
                                            className={`py-2 rounded-lg transition-all ${
                                                paymentMethod === 'qr'
                                                    ? 'bg-blue-600 text-white'
                                                    : 'bg-gray-200 hover:bg-gray-300'
                                            }`}
                                        >
                                            <i className="fas fa-qrcode mr-1"></i>
                                            QR
                                        </button>
                                    </div>

                                    {paymentMethod === 'cash' && (
                                        <input
                                            type="number"
                                            placeholder="จำนวนเงินที่รับ"
                                            value={receivedAmount}
                                            onChange={(e) => setReceivedAmount(e.target.value)}
                                            className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        />
                                    )}

                                    {paymentMethod === 'cash' && receivedAmount && (
                                        <div className="text-center bg-gray-50 py-2 rounded">
                                            <span className="text-gray-600">เงินทอน: </span>
                                            <span className="font-bold text-lg text-green-600">
                                                ฿{Math.max(0, parseFloat(receivedAmount) - getTotalPrice()).toFixed(2)}
                                            </span>
                                        </div>
                                    )}

                                    <div className="grid grid-cols-2 gap-2">
                                        <button
                                            onClick={() => setShowPayment(false)}
                                            disabled={processing}
                                            className="py-2 bg-gray-300 rounded-lg hover:bg-gray-400"
                                        >
                                            ยกเลิก
                                        </button>
                                        <button
                                            onClick={handlePayment}
                                            disabled={processing}
                                            className={`py-2 rounded-lg ${
                                                processing 
                                                    ? 'bg-gray-400 cursor-not-allowed' 
                                                    : 'bg-green-600 text-white hover:bg-green-700'
                                            }`}
                                        >
                                            {processing ? (
                                                <i className="fas fa-spinner fa-spin"></i>
                                            ) : (
                                                'ยืนยัน'
                                            )}
                                        </button>
                                    </div>
                                </div>
                            )}
                        </div>
                    </div>
                </div>
            );
        };

        // Component: Menu Management with Addons
        const MenuManagement = () => {
            const [menuItems, setMenuItems] = useState([]);
            const [addons, setAddons] = useState([]);
            const [editingItem, setEditingItem] = useState(null);
            const [editingAddon, setEditingAddon] = useState(null);
            const [showAddForm, setShowAddForm] = useState(false);
            const [showAddonForm, setShowAddonForm] = useState(false);
            const [activeTab, setActiveTab] = useState('menu');
            const [loading, setLoading] = useState(true);
            const [toast, setToast] = useState(null);

            const [formData, setFormData] = useState({
                name: '',
                category: 'coffee',
                price: '',
                image: '☕',
                allow_size: true,
                allow_sweetness: true,
                allow_addons: true
            });

            const [addonFormData, setAddonFormData] = useState({
                name: '',
                price: '',
                category: 'topping'
            });

            useEffect(() => {
                loadData();
            }, []);

            const loadData = async () => {
                setLoading(true);
                const [items, addonsList] = await Promise.all([
                    DatabaseService.getMenuItems(),
                    DatabaseService.getMenuAddons()
                ]);
                setMenuItems(items);
                setAddons(addonsList);
                setLoading(false);
            };

            const handleSaveMenu = async () => {
                if (!formData.name || !formData.price) {
                    setToast({ message: 'กรุณากรอกข้อมูลให้ครบ', type: 'error' });
                    return;
                }

                let result;
                if (editingItem) {
                    result = await DatabaseService.updateMenuItem(editingItem.id, {
                        ...formData,
                        price: parseFloat(formData.price)
                    });
                } else {
                    result = await DatabaseService.addMenuItem({
                        ...formData,
                        price: parseFloat(formData.price)
                    });
                }

                if (result.success) {
                    setToast({ message: 'บันทึกสำเร็จ', type: 'success' });
                    await loadData();
                    resetMenuForm();
                } else {
                    setToast({ message: 'เกิดข้อผิดพลาด: ' + result.error, type: 'error' });
                }
            };

            const handleSaveAddon = async () => {
                if (!addonFormData.name || !addonFormData.price) {
                    setToast({ message: 'กรุณากรอกข้อมูลให้ครบ', type: 'error' });
                    return;
                }

                let result;
                if (editingAddon) {
                    result = await DatabaseService.updateAddon(editingAddon.id, {
                        ...addonFormData,
                        price: parseFloat(addonFormData.price)
                    });
                } else {
                    result = await DatabaseService.addAddon({
                        ...addonFormData,
                        price: parseFloat(addonFormData.price)
                    });
                }

                if (result.success) {
                    setToast({ message: 'บันทึกสำเร็จ', type: 'success' });
                    await loadData();
                    resetAddonForm();
                } else {
                    setToast({ message: 'เกิดข้อผิดพลาด: ' + result.error, type: 'error' });
                }
            };

            const handleDeleteMenu = async (id, name) => {
                if (confirm(`ต้องการลบ "${name}" หรือไม่?`)) {
                    const result = await DatabaseService.deleteMenuItem(id);
                    if (result.success) {
                        setToast({ message: 'ลบสำเร็จ', type: 'success' });
                        await loadData();
                    }
                }
            };

            const handleDeleteAddon = async (id, name) => {
                if (confirm(`ต้องการลบ "${name}" หรือไม่?`)) {
                    const result = await DatabaseService.deleteAddon(id);
                    if (result.success) {
                        setToast({ message: 'ลบสำเร็จ', type: 'success' });
                        await loadData();
                    }
                }
            };

            const resetMenuForm = () => {
                setEditingItem(null);
                setShowAddForm(false);
                setFormData({
                    name: '',
                    category: 'coffee',
                    price: '',
                    image: '☕',
                    allow_size: true,
                    allow_sweetness: true,
                    allow_addons: true
                });
            };

            const resetAddonForm = () => {
                setEditingAddon(null);
                setShowAddonForm(false);
                setAddonFormData({
                    name: '',
                    price: '',
                    category: 'topping'
                });
            };

            const categoryEmojis = {
                coffee: '☕',
                tea: '🍵',
                chocolate: '🍫',
                milk: '🥛',
                bakery: '🥐'
            };

            return (
                <div className="bg-white rounded-lg shadow-lg p-6">
                    {toast && (
                        <Toast 
                            message={toast.message} 
                            type={toast.type} 
                            onClose={() => setToast(null)} 
                        />
                    )}

                    <div className="flex justify-between items-center mb-6">
                        <h2 className="text-2xl font-bold text-gray-800">
                            <i className="fas fa-coffee mr-2"></i>
                            จัดการเมนู
                        </h2>
                    </div>

                    {/* Tabs */}
                    <div className="flex gap-2 mb-6 border-b">
                        <button
                            onClick={() => setActiveTab('menu')}
                            className={`px-4 py-2 font-medium transition-all ${
                                activeTab === 'menu'
                                    ? 'text-amber-600 border-b-2 border-amber-600'
                                    : 'text-gray-600 hover:text-amber-600'
                            }`}
                        >
                            เมนูหลัก
                        </button>
                        <button
                            onClick={() => setActiveTab('addons')}
                            className={`px-4 py-2 font-medium transition-all ${
                                activeTab === 'addons'
                                    ? 'text-amber-600 border-b-2 border-amber-600'
                                    : 'text-gray-600 hover:text-amber-600'
                            }`}
                        >
                            ตัวเลือกเพิ่มเติม
                        </button>
                    </div>

                    {/* Menu Items Tab */}
                    {activeTab === 'menu' && (
                        <div>
                            <div className="flex justify-end mb-4">
                                <button
                                    onClick={() => setShowAddForm(true)}
                                    className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                                >
                                    <i className="fas fa-plus mr-2"></i>
                                    เพิ่มเมนู
                                </button>
                            </div>

                            {/* Menu Form */}
                            {(showAddForm || editingItem) && (
                                <div className="mb-6 p-4 border-2 border-amber-200 rounded-lg bg-amber-50">
                                    <h3 className="font-bold mb-4 text-lg">
                                        {editingItem ? 'แก้ไขเมนู' : 'เพิ่มเมนูใหม่'}
                                    </h3>
                                    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                                        <input
                                            type="text"
                                            placeholder="ชื่อเมนู"
                                            value={formData.name}
                                            onChange={(e) => setFormData({...formData, name: e.target.value})}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        />
                                        <select
                                            value={formData.category}
                                            onChange={(e) => setFormData({
                                                ...formData, 
                                                category: e.target.value,
                                                image: categoryEmojis[e.target.value]
                                            })}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        >
                                            <option value="coffee">กาแฟ</option>
                                            <option value="tea">ชา</option>
                                            <option value="chocolate">ช็อกโกแลต</option>
                                            <option value="milk">นม</option>
                                            <option value="bakery">เบเกอรี่</option>
                                        </select>
                                        <input
                                            type="number"
                                            placeholder="ราคา"
                                            value={formData.price}
                                            onChange={(e) => setFormData({...formData, price: e.target.value})}
                                            className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                        />
                                        <div className="flex items-center gap-4">
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    checked={formData.allow_size}
                                                    onChange={(e) => setFormData({...formData, allow_size: e.target.checked})}
                                                    className="mr-2"
                                                />
                                                เลือกขนาดได้
                                            </label>
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    checked={formData.allow_sweetness}
                                                    onChange={(e) => setFormData({...formData, allow_sweetness: e.target.checked})}
                                                    className="mr-2"
                                                />
                                                ปรับความหวานได้
                                            </label>
                                            <label className="flex items-center">
                                                <input
                                                    type="checkbox"
                                                    checked={formData.allow_addons}
                                                    onChange={(e) => setFormData({...formData, allow_addons: e.target.checked})}
                                                    className="mr-2"
                                                />
                                                เพิ่มท็อปปิ้งได้
                                            </label>
                                        </div>
                                    </div>
                                    <div className="flex gap-2 mt-4">
                                        <button
                                            onClick={handleSaveMenu}
                                            className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                                        >
                                            <i className="fas fa-save mr-2"></i>
                                            บันทึก
                                        </button>
                                        <button
                                            onClick={resetMenuForm}
                                            className="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400"
                                        >
                                            ยกเลิก
                                        </button>
                                    </div>
                                </div>
                            )}

                            {/* Menu Table */}
                            {loading ? (
                                <div className="flex items-center justify-center py-8">
                                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                                </div>
                            ) : (
                                <div className="overflow-x-auto">
<table className="w-full">
                                       <thead>
                                           <tr className="border-b bg-gray-50">
                                               <th className="text-left py-3 px-2">รูป</th>
                                               <th className="text-left py-3">ชื่อเมนู</th>
                                               <th className="text-left py-3">หมวดหมู่</th>
                                               <th className="text-center py-3">ตัวเลือก</th>
                                               <th className="text-right py-3">ราคา</th>
                                               <th className="text-center py-3">จัดการ</th>
                                           </tr>
                                       </thead>
                                       <tbody>
                                           {menuItems.map(item => (
                                               <tr key={item.id} className="border-b hover:bg-gray-50">
                                                   <td className="py-3 text-2xl px-2">{item.image}</td>
                                                   <td className="py-3 font-medium">{item.name}</td>
                                                   <td className="py-3">
                                                       <span className="px-2 py-1 bg-gray-100 rounded-full text-sm">
                                                           {item.category}
                                                       </span>
                                                   </td>
                                                   <td className="py-3 text-center">
                                                       <div className="flex justify-center gap-2">
                                                           {item.allow_size && <span className="text-xs bg-blue-100 px-2 py-1 rounded">Size</span>}
                                                           {item.allow_sweetness && <span className="text-xs bg-green-100 px-2 py-1 rounded">หวาน</span>}
                                                           {item.allow_addons && <span className="text-xs bg-purple-100 px-2 py-1 rounded">เพิ่มเติม</span>}
                                                       </div>
                                                   </td>
                                                   <td className="py-3 text-right font-bold text-amber-600">
                                                       ฿{parseFloat(item.price).toFixed(2)}
                                                   </td>
                                                   <td className="py-3 text-center">
                                                       <button
                                                           onClick={() => {
                                                               setEditingItem(item);
                                                               setFormData({
                                                                   name: item.name,
                                                                   category: item.category,
                                                                   price: item.price.toString(),
                                                                   image: item.image,
                                                                   allow_size: item.allow_size,
                                                                   allow_sweetness: item.allow_sweetness,
                                                                   allow_addons: item.allow_addons
                                                               });
                                                           }}
                                                           className="text-blue-600 hover:text-blue-800 mr-3"
                                                       >
                                                           <i className="fas fa-edit"></i>
                                                       </button>
                                                       <button
                                                           onClick={() => handleDeleteMenu(item.id, item.name)}
                                                           className="text-red-600 hover:text-red-800"
                                                       >
                                                           <i className="fas fa-trash"></i>
                                                       </button>
                                                   </td>
                                               </tr>
                                           ))}
                                       </tbody>
                                   </table>
                               </div>
                           )}
                       </div>
                   )}

                   {/* Addons Tab */}
                   {activeTab === 'addons' && (
                       <div>
                           <div className="flex justify-end mb-4">
                               <button
                                   onClick={() => setShowAddonForm(true)}
                                   className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700"
                               >
                                   <i className="fas fa-plus mr-2"></i>
                                   เพิ่มตัวเลือก
                               </button>
                           </div>

                           {/* Addon Form */}
                           {(showAddonForm || editingAddon) && (
                               <div className="mb-6 p-4 border-2 border-amber-200 rounded-lg bg-amber-50">
                                   <h3 className="font-bold mb-4 text-lg">
                                       {editingAddon ? 'แก้ไขตัวเลือก' : 'เพิ่มตัวเลือกใหม่'}
                                   </h3>
                                   <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                                       <input
                                           type="text"
                                           placeholder="ชื่อตัวเลือก"
                                           value={addonFormData.name}
                                           onChange={(e) => setAddonFormData({...addonFormData, name: e.target.value})}
                                           className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                       />
                                       <input
                                           type="number"
                                           placeholder="ราคาเพิ่ม"
                                           value={addonFormData.price}
                                           onChange={(e) => setAddonFormData({...addonFormData, price: e.target.value})}
                                           className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                       />
                                       <select
                                           value={addonFormData.category}
                                           onChange={(e) => setAddonFormData({...addonFormData, category: e.target.value})}
                                           className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                       >
                                           <option value="topping">ท็อปปิ้ง</option>
                                           <option value="extra">เพิ่มพิเศษ</option>
                                           <option value="syrup">ไซรัป</option>
                                           <option value="sweetener">สารให้ความหวาน</option>
                                       </select>
                                   </div>
                                   <div className="flex gap-2 mt-4">
                                       <button
                                           onClick={handleSaveAddon}
                                           className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700"
                                       >
                                           <i className="fas fa-save mr-2"></i>
                                           บันทึก
                                       </button>
                                       <button
                                           onClick={resetAddonForm}
                                           className="px-4 py-2 bg-gray-300 rounded-lg hover:bg-gray-400"
                                       >
                                           ยกเลิก
                                       </button>
                                   </div>
                               </div>
                           )}

                           {/* Addons Table */}
                           {loading ? (
                               <div className="flex items-center justify-center py-8">
                                   <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                               </div>
                           ) : (
                               <div className="overflow-x-auto">
                                   <table className="w-full">
                                       <thead>
                                           <tr className="border-b bg-gray-50">
                                               <th className="text-left py-3">ชื่อตัวเลือก</th>
                                               <th className="text-left py-3">ประเภท</th>
                                               <th className="text-right py-3">ราคาเพิ่ม</th>
                                               <th className="text-center py-3">จัดการ</th>
                                           </tr>
                                       </thead>
                                       <tbody>
                                           {addons.map(addon => (
                                               <tr key={addon.id} className="border-b hover:bg-gray-50">
                                                   <td className="py-3 font-medium">{addon.name}</td>
                                                   <td className="py-3">
                                                       <span className="px-2 py-1 bg-gray-100 rounded-full text-sm">
                                                           {addon.category}
                                                       </span>
                                                   </td>
                                                   <td className="py-3 text-right font-bold text-amber-600">
                                                       +฿{parseFloat(addon.price).toFixed(2)}
                                                   </td>
                                                   <td className="py-3 text-center">
                                                       <button
                                                           onClick={() => {
                                                               setEditingAddon(addon);
                                                               setAddonFormData({
                                                                   name: addon.name,
                                                                   price: addon.price.toString(),
                                                                   category: addon.category
                                                               });
                                                           }}
                                                           className="text-blue-600 hover:text-blue-800 mr-3"
                                                       >
                                                           <i className="fas fa-edit"></i>
                                                       </button>
                                                       <button
                                                           onClick={() => handleDeleteAddon(addon.id, addon.name)}
                                                           className="text-red-600 hover:text-red-800"
                                                       >
                                                           <i className="fas fa-trash"></i>
                                                       </button>
                                                   </td>
                                               </tr>
                                           ))}
                                       </tbody>
                                   </table>
                               </div>
                           )}
                       </div>
                   )}
               </div>
           );
       };

       // Component: Sales History with Edit/Delete
       const SalesHistory = () => {
           const [orders, setOrders] = useState([]);
           const [selectedDate, setSelectedDate] = useState(new Date().toISOString().split('T')[0]);
           const [loading, setLoading] = useState(true);
           const [toast, setToast] = useState(null);
           const [editingOrder, setEditingOrder] = useState(null);

           useEffect(() => {
               loadOrders();
           }, [selectedDate]);

           const loadOrders = async () => {
               setLoading(true);
               const data = await DatabaseService.getOrders(selectedDate);
               setOrders(data);
               setLoading(false);
           };

           const handleDeleteOrder = async (orderId, orderNumber) => {
               if (confirm(`ต้องการลบออเดอร์ ${orderNumber} หรือไม่?`)) {
                   const result = await DatabaseService.deleteOrder(orderId);
                   if (result.success) {
                       setToast({ message: 'ลบออเดอร์สำเร็จ', type: 'success' });
                       await loadOrders();
                   } else {
                       setToast({ message: 'เกิดข้อผิดพลาด: ' + result.error, type: 'error' });
                   }
               }
           };

           const handleEditOrder = async (orderId, updates) => {
               const result = await DatabaseService.updateOrder(orderId, updates);
               if (result.success) {
                   setToast({ message: 'แก้ไขออเดอร์สำเร็จ', type: 'success' });
                   await loadOrders();
                   setEditingOrder(null);
               } else {
                   setToast({ message: 'เกิดข้อผิดพลาด: ' + result.error, type: 'error' });
               }
           };

           const EditOrderModal = ({ order, onClose, onSave }) => {
               const [editedOrder, setEditedOrder] = useState({
                   payment_method: order.payment_method,
                   received_amount: order.received_amount || order.total,
                   total: order.total
               });

               const handleSave = () => {
                   const change = editedOrder.payment_method === 'cash' 
                       ? parseFloat(editedOrder.received_amount) - parseFloat(editedOrder.total)
                       : 0;
                   
                   onSave(order.id, {
                       ...editedOrder,
                       change_amount: change
                   });
               };

               return (
                   <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
                       <div className="bg-white rounded-xl p-6 max-w-md w-full m-4">
                           <h3 className="text-xl font-bold mb-4">
                               แก้ไขออเดอร์ #{order.order_number}
                           </h3>

                           <div className="space-y-4">
                               <div>
                                   <label className="block text-sm font-medium mb-2">วิธีชำระเงิน</label>
                                   <select
                                       value={editedOrder.payment_method}
                                       onChange={(e) => setEditedOrder({...editedOrder, payment_method: e.target.value})}
                                       className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                   >
                                       <option value="cash">เงินสด</option>
                                       <option value="qr">QR Payment</option>
                                   </select>
                               </div>

                               <div>
                                   <label className="block text-sm font-medium mb-2">ยอดรวม</label>
                                   <input
                                       type="number"
                                       value={editedOrder.total}
                                       onChange={(e) => setEditedOrder({...editedOrder, total: e.target.value})}
                                       className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                   />
                               </div>

                               {editedOrder.payment_method === 'cash' && (
                                   <div>
                                       <label className="block text-sm font-medium mb-2">รับเงิน</label>
                                       <input
                                           type="number"
                                           value={editedOrder.received_amount}
                                           onChange={(e) => setEditedOrder({...editedOrder, received_amount: e.target.value})}
                                           className="w-full px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                       />
                                   </div>
                               )}

                               {editedOrder.payment_method === 'cash' && (
                                   <div className="bg-gray-50 p-3 rounded-lg">
                                       <div className="flex justify-between">
                                           <span>เงินทอน:</span>
                                           <span className="font-bold text-green-600">
                                               ฿{(parseFloat(editedOrder.received_amount) - parseFloat(editedOrder.total)).toFixed(2)}
                                           </span>
                                       </div>
                                   </div>
                               )}
                           </div>

                           <div className="grid grid-cols-2 gap-3 mt-6">
                               <button
                                   onClick={onClose}
                                   className="py-2 bg-gray-200 rounded-lg hover:bg-gray-300"
                               >
                                   ยกเลิก
                               </button>
                               <button
                                   onClick={handleSave}
                                   className="py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700"
                               >
                                   บันทึก
                               </button>
                           </div>
                       </div>
                   </div>
               );
           };

           return (
               <div className="bg-white rounded-lg shadow-lg p-6">
                   {toast && (
                       <Toast 
                           message={toast.message} 
                           type={toast.type} 
                           onClose={() => setToast(null)} 
                       />
                   )}

                   {editingOrder && (
                       <EditOrderModal
                           order={editingOrder}
                           onClose={() => setEditingOrder(null)}
                           onSave={handleEditOrder}
                       />
                   )}

                   <div className="flex justify-between items-center mb-6">
                       <h2 className="text-2xl font-bold text-gray-800">
                           <i className="fas fa-history mr-2"></i>
                           ประวัติการขาย
                       </h2>
                       <input
                           type="date"
                           value={selectedDate}
                           onChange={(e) => setSelectedDate(e.target.value)}
                           className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                       />
                   </div>

                   {loading ? (
                       <div className="flex items-center justify-center py-8">
                           <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                       </div>
                   ) : orders.length === 0 ? (
                       <div className="text-center text-gray-400 py-8">
                           <i className="fas fa-receipt text-4xl mb-2"></i>
                           <p>ไม่มีรายการขายในวันที่เลือก</p>
                       </div>
                   ) : (
                       <div className="space-y-4">
                           {orders.map(order => (
                               <div key={order.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
                                   <div className="flex justify-between items-start mb-3">
                                       <div>
                                           <div className="font-bold text-lg">
                                               #{order.order_number}
                                           </div>
                                           <div className="text-sm text-gray-500">
                                               {new Date(order.created_at).toLocaleTimeString('th-TH')}
                                               {order.users && (
                                                   <span className="ml-2">
                                                       <i className="fas fa-user mr-1"></i>
                                                       {order.users.name}
                                                   </span>
                                               )}
                                           </div>
                                       </div>
                                       <div className="flex items-start gap-2">
                                           <div className="text-right">
                                               <div className="font-bold text-xl text-amber-600">
                                                   ฿{parseFloat(order.total).toFixed(2)}
                                               </div>
                                               <div className="text-sm">
                                                   {order.payment_method === 'cash' ? '💵 เงินสด' : '📱 QR'}
                                               </div>
                                           </div>
                                           <div className="flex gap-1">
                                               <button
                                                   onClick={() => setEditingOrder(order)}
                                                   className="px-2 py-1 text-blue-600 hover:bg-blue-50 rounded"
                                                   title="แก้ไข"
                                               >
                                                   <i className="fas fa-edit"></i>
                                               </button>
                                               <button
                                                   onClick={() => handleDeleteOrder(order.id, order.order_number)}
                                                   className="px-2 py-1 text-red-600 hover:bg-red-50 rounded"
                                                   title="ลบ"
                                               >
                                                   <i className="fas fa-trash"></i>
                                               </button>
                                           </div>
                                       </div>
                                   </div>
                                   
                                   <div className="border-t pt-3">
                                       {order.order_items && order.order_items.map((item, idx) => (
                                           <div key={idx} className="flex justify-between text-sm mb-1">
                                               <span>
                                                   {item.name} 
                                                   {item.size && ` (${item.size})`}
                                                   {item.sweetness && ` ${item.sweetness}`}
                                                   {item.addons && item.addons.length > 0 && (
                                                       <span className="text-amber-600">
                                                           {' '}+ {item.addons.map(a => a.name).join(', ')}
                                                       </span>
                                                   )}
                                                   {' '}x {item.quantity}
                                               </span>
                                               <span className="font-medium">
                                                   ฿{parseFloat(item.subtotal).toFixed(2)}
                                               </span>
                                           </div>
                                       ))}
                                   </div>
                                   
                                   {order.payment_method === 'cash' && (
                                       <div className="mt-3 pt-3 border-t text-sm">
                                           <div className="flex justify-between">
                                               <span>รับเงิน:</span>
                                               <span>฿{parseFloat(order.received_amount).toFixed(2)}</span>
                                           </div>
                                           <div className="flex justify-between text-green-600 font-medium">
                                               <span>เงินทอน:</span>
                                               <span>฿{parseFloat(order.change_amount).toFixed(2)}</span>
                                           </div>
                                       </div>
                                   )}
                               </div>
                           ))}
                       </div>
                   )}
               </div>
           );
       };

       // Component: Advanced Sales Report
       const SalesReport = () => {
           const [startDate, setStartDate] = useState(() => {
               const date = new Date();
               date.setDate(date.getDate() - 30);
               return date.toISOString().split('T')[0];
           });
           const [endDate, setEndDate] = useState(new Date().toISOString().split('T')[0]);
           const [reportData, setReportData] = useState(null);
           const [loading, setLoading] = useState(true);
           const [viewMode, setViewMode] = useState('summary'); // summary, category, daily
           const chartRef = useRef(null);
           const chartInstance = useRef(null);

           useEffect(() => {
               loadReport();
           }, [startDate, endDate]);

           useEffect(() => {
               if (reportData && viewMode === 'daily') {
                   drawChart();
               }
               return () => {
                   if (chartInstance.current) {
                       chartInstance.current.destroy();
                   }
               };
           }, [reportData, viewMode]);

           const loadReport = async () => {
               setLoading(true);
               const start = new Date(startDate);
               const end = new Date(endDate);
               end.setHours(23, 59, 59, 999);
               
               const data = await DatabaseService.getSalesReport(start, end);
               
               // Process data
               const processedData = processReportData(data);
               setReportData(processedData);
               setLoading(false);
           };

           const processReportData = (data) => {
               const { orders, orderItems } = data;
               
               // Summary stats
               const totalRevenue = orders.reduce((sum, order) => sum + parseFloat(order.total), 0);
               const totalOrders = orders.length;
               const avgOrderValue = totalOrders > 0 ? totalRevenue / totalOrders : 0;
               
               // Daily sales
               const dailySales = {};
               orders.forEach(order => {
                   const date = new Date(order.created_at).toISOString().split('T')[0];
                   if (!dailySales[date]) {
                       dailySales[date] = { revenue: 0, orders: 0 };
                   }
                   dailySales[date].revenue += parseFloat(order.total);
                   dailySales[date].orders += 1;
               });
               
               // Category sales
               const categorySales = {};
               orderItems.forEach(item => {
                   const category = item.menu_items?.category || 'other';
                   if (!categorySales[category]) {
                       categorySales[category] = { revenue: 0, quantity: 0, items: [] };
                   }
                   categorySales[category].revenue += parseFloat(item.subtotal);
                   categorySales[category].quantity += item.quantity;
                   
                   // Track individual items
                   const existingItem = categorySales[category].items.find(i => i.name === item.name);
                   if (existingItem) {
                       existingItem.quantity += item.quantity;
                       existingItem.revenue += parseFloat(item.subtotal);
                   } else {
                       categorySales[category].items.push({
                           name: item.name,
                           quantity: item.quantity,
                           revenue: parseFloat(item.subtotal)
                       });
                   }
               });
               
               // Top items
               const allItems = {};
               orderItems.forEach(item => {
                   if (!allItems[item.name]) {
                       allItems[item.name] = { name: item.name, quantity: 0, revenue: 0 };
                   }
                   allItems[item.name].quantity += item.quantity;
                   allItems[item.name].revenue += parseFloat(item.subtotal);
               });
               
               const topItems = Object.values(allItems)
                   .sort((a, b) => b.quantity - a.quantity)
                   .slice(0, 10);
               
               return {
                   summary: {
                       totalRevenue,
                       totalOrders,
                       avgOrderValue
                   },
                   dailySales,
                   categorySales,
                   topItems
               };
           };

           const drawChart = () => {
               if (!chartRef.current || !reportData) return;
               
               if (chartInstance.current) {
                   chartInstance.current.destroy();
               }
               
               const ctx = chartRef.current.getContext('2d');
               const dates = Object.keys(reportData.dailySales).sort();
               const revenues = dates.map(date => reportData.dailySales[date].revenue);
               
               chartInstance.current = new Chart(ctx, {
                   type: 'line',
                   data: {
                       labels: dates.map(date => {
                           const d = new Date(date);
                           return d.toLocaleDateString('th-TH', { day: 'numeric', month: 'short' });
                       }),
                       datasets: [{
                           label: 'ยอดขายรายวัน',
                           data: revenues,
                           borderColor: 'rgb(217, 119, 6)',
                           backgroundColor: 'rgba(217, 119, 6, 0.1)',
                           tension: 0.1
                       }]
                   },
                   options: {
                       responsive: true,
                       maintainAspectRatio: false,
                       plugins: {
                           legend: {
                               display: false
                           }
                       },
                       scales: {
                           y: {
                               beginAtZero: true,
                               ticks: {
                                   callback: function(value) {
                                       return '฿' + value.toLocaleString();
                                   }
                               }
                           }
                       }
                   }
               });
           };

           const categoryColors = {
               coffee: 'bg-amber-100 text-amber-800',
               tea: 'bg-green-100 text-green-800',
               chocolate: 'bg-orange-100 text-orange-800',
               milk: 'bg-blue-100 text-blue-800',
               bakery: 'bg-purple-100 text-purple-800'
           };

           if (loading) {
               return (
                   <div className="flex items-center justify-center py-8">
                       <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-amber-600"></div>
                   </div>
               );
           }

           return (
               <div>
                   <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                       <div className="flex flex-wrap items-center justify-between gap-4 mb-6">
                           <h2 className="text-2xl font-bold text-gray-800">
                               <i className="fas fa-chart-line mr-2"></i>
                               รายงานยอดขาย
                           </h2>
                           
                           <div className="flex flex-wrap items-center gap-3">
                               <div className="flex items-center gap-2">
                                   <label className="text-sm">จาก:</label>
                                   <input
                                       type="date"
                                       value={startDate}
                                       onChange={(e) => setStartDate(e.target.value)}
                                       className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                   />
                               </div>
                               <div className="flex items-center gap-2">
                                   <label className="text-sm">ถึง:</label>
                                   <input
                                       type="date"
                                       value={endDate}
                                       onChange={(e) => setEndDate(e.target.value)}
                                       className="px-3 py-2 border rounded-lg focus:outline-none focus:border-amber-500"
                                   />
                               </div>
                               <button
                                   onClick={loadReport}
                                   className="px-4 py-2 bg-amber-600 text-white rounded-lg hover:bg-amber-700"
                               >
                                   <i className="fas fa-sync mr-2"></i>
                                   อัพเดท
                               </button>
                           </div>
                       </div>

                       {/* View Mode Tabs */}
                       <div className="flex gap-2 mb-6 border-b">
                           <button
                               onClick={() => setViewMode('summary')}
                               className={`px-4 py-2 font-medium transition-all ${
                                   viewMode === 'summary'
                                       ? 'text-amber-600 border-b-2 border-amber-600'
                                       : 'text-gray-600 hover:text-amber-600'
                               }`}
                           >
                               สรุปภาพรวม
                           </button>
                           <button
                               onClick={() => setViewMode('category')}
                               className={`px-4 py-2 font-medium transition-all ${
                                   viewMode === 'category'
                                       ? 'text-amber-600 border-b-2 border-amber-600'
                                       : 'text-gray-600 hover:text-amber-600'
                               }`}
                           >
                               ตามหมวดหมู่
                           </button>
                           <button
                               onClick={() => setViewMode('daily')}
                               className={`px-4 py-2 font-medium transition-all ${
                                   viewMode === 'daily'
                                       ? 'text-amber-600 border-b-2 border-amber-600'
                                       : 'text-gray-600 hover:text-amber-600'
                               }`}
                           >
                               รายวัน
                           </button>
                       </div>

                       {/* Summary View */}
                       {viewMode === 'summary' && reportData && (
                           <div>
                               {/* Summary Cards */}
                               <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                                   <div className="bg-gradient-to-r from-green-50 to-green-100 rounded-lg p-6">
                                       <div className="flex items-center justify-between">
                                           <div>
                                               <p className="text-gray-600 text-sm">ยอดขายรวม</p>
                                               <p className="text-3xl font-bold text-green-600">
                                                   ฿{reportData.summary.totalRevenue.toFixed(2)}
                                               </p>
                                           </div>
                                           <div className="text-4xl text-green-500">💰</div>
                                       </div>
                                   </div>
                                   
                                   <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-lg p-6">
                                       <div className="flex items-center justify-between">
                                           <div>
                                               <p className="text-gray-600 text-sm">จำนวนออเดอร์</p>
                                               <p className="text-3xl font-bold text-blue-600">
                                                   {reportData.summary.totalOrders}
                                               </p>
                                           </div>
                                           <div className="text-4xl text-blue-500">📋</div>
                                       </div>
                                   </div>
                                   
                                   <div className="bg-gradient-to-r from-purple-50 to-purple-100 rounded-lg p-6">
                                       <div className="flex items-center justify-between">
                                           <div>
                                               <p className="text-gray-600 text-sm">ยอดขายเฉลี่ย/ออเดอร์</p>
                                               <p className="text-3xl font-bold text-purple-600">
                                                   ฿{reportData.summary.avgOrderValue.toFixed(2)}
                                               </p>
                                           </div>
                                           <div className="text-4xl text-purple-500">📊</div>
                                       </div>
                                   </div>
                               </div>

                               {/* Top Items */}
                               <div className="bg-gray-50 rounded-lg p-6">
                                   <h3 className="text-xl font-bold mb-4">
                                       <i className="fas fa-trophy mr-2 text-yellow-500"></i>
                                       เมนูขายดี Top 10
                                   </h3>
                                   <div className="space-y-3">
                                       {reportData.topItems.map((item, index) => (
                                           <div key={index} className="flex items-center justify-between p-3 bg-white rounded-lg">
                                               <div className="flex items-center">
                                                   <div className={`w-8 h-8 rounded-full flex items-center justify-center font-bold text-white mr-3 ${
                                                       index === 0 ? 'bg-yellow-500' :
                                                       index === 1 ? 'bg-gray-400' :
                                                       index === 2 ? 'bg-orange-500' :
                                                       'bg-gray-300'
                                                   }`}>
                                                       {index + 1}
                                                   </div>
                                                   <div>
                                                       <div className="font-medium">{item.name}</div>
                                                       <div className="text-sm text-gray-500">
                                                           ขายแล้ว {item.quantity} แก้ว
                                                       </div>
                                                   </div>
                                               </div>
                                               <div className="text-right">
                                                   <div className="font-bold text-amber-600">
                                                       ฿{item.revenue.toFixed(2)}
                                                   </div>
                                               </div>
                                           </div>
                                       ))}
                                   </div>
                               </div>
                           </div>
                       )}

                       {/* Category View */}
                       {viewMode === 'category' && reportData && (
                           <div className="space-y-6">
                               {Object.entries(reportData.categorySales).map(([category, data]) => (
                                   <div key={category} className="bg-gray-50 rounded-lg p-6">
                                       <div className="flex justify-between items-center mb-4">
                                           <h3 className="text-lg font-bold">
                                               <span className={`px-3 py-1 rounded-full text-sm ${categoryColors[category] || 'bg-gray-100'}`}>
                                                   {category}
                                               </span>
                                           </h3>
                                           <div className="text-right">
                                               <p className="text-2xl font-bold text-amber-600">
                                                   ฿{data.revenue.toFixed(2)}
                                               </p>
                                               <p className="text-sm text-gray-500">
                                                   {data.quantity} รายการ
                                               </p>
                                           </div>
                                       </div>
                                       
                                       <div className="grid grid-cols-1 md:grid-cols-2 gap-2">
                                           {data.items
                                               .sort((a, b) => b.quantity - a.quantity)
                                               .slice(0, 5)
                                               .map((item, idx) => (
                                                   <div key={idx} className="flex justify-between bg-white p-2 rounded">
                                                       <span className="text-sm">{item.name}</span>
                                                       <span className="text-sm font-medium">
                                                           {item.quantity} แก้ว (฿{item.revenue.toFixed(2)})
                                                       </span>
                                                   </div>
                                               ))}
                                       </div>
                                   </div>
                               ))}
                           </div>
                       )}

                       {/* Daily View */}
                       {viewMode === 'daily' && reportData && (
                           <div>
                               <div className="mb-6" style={{ height: '300px' }}>
                                   <canvas ref={chartRef}></canvas>
                               </div>
                               
                               <div className="overflow-x-auto">
                                   <table className="w-full">
                                       <thead>
                                           <tr className="border-b bg-gray-50">
                                               <th className="text-left py-3">วันที่</th>
                                               <th className="text-center py-3">จำนวนออเดอร์</th>
                                               <th className="text-right py-3">ยอดขาย</th>
                                           </tr>
                                       </thead>
                                       <tbody>
                                           {Object.entries(reportData.dailySales)
                                               .sort((a, b) => b[0].localeCompare(a[0]))
                                               .map(([date, data]) => (
                                                   <tr key={date} className="border-b hover:bg-gray-50">
                                                       <td className="py-3">
                                                           {new Date(date).toLocaleDateString('th-TH', {
                                                               weekday: 'long',
                                                               year: 'numeric',
                                                               month: 'long',
                                                               day: 'numeric'
                                                           })}
                                                       </td>
                                                       <td className="py-3 text-center">{data.orders}</td>
                                                       <td className="py-3 text-right font-bold text-amber-600">
                                                           ฿{data.revenue.toFixed(2)}
                                                       </td>
                                                   </tr>
                                               ))}
                                       </tbody>
                                   </table>
                               </div>
                           </div>
                       )}
                   </div>
               </div>
           );
       };

       // Main App Component
       const CoffeePOSApp = () => {
           const { user, logout, loading: authLoading } = useAuth();
           const [currentPage, setCurrentPage] = useState('pos');

           const navigation = [
               { id: 'pos', name: 'หน้าขาย', icon: 'fas fa-cash-register' },
               { id: 'menu', name: 'จัดการเมนู', icon: 'fas fa-coffee', adminOnly: true },
               { id: 'history', name: 'ประวัติ', icon: 'fas fa-history' },
               { id: 'report', name: 'รายงาน', icon: 'fas fa-chart-line' }
           ];

           const filteredNavigation = navigation.filter(nav => 
               !nav.adminOnly || (nav.adminOnly && user?.role === 'admin')
           );

           if (authLoading) {
               return (
                   <div className="min-h-screen flex items-center justify-center bg-gradient-to-br from-amber-50 to-orange-50">
                       <div className="text-center">
                           <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-amber-600 mx-auto mb-4"></div>
                           <p className="text-lg">กำลังโหลด...</p>
                       </div>
                   </div>
               );
           }

           if (!user) {
               return <LoginScreen />;
           }

           return (
               <div className="min-h-screen bg-gradient-to-br from-amber-50 to-orange-50">
                   {/* Header */}
                   <header className="bg-gradient-to-r from-amber-700 to-amber-600 text-white shadow-lg">
                       <div className="container mx-auto px-4 py-4">
                           <div className="flex items-center justify-between">
                               <h1 className="text-2xl font-bold">
                                   <i className="fas fa-mug-hot mr-2"></i>
                                   Coffee Shop POS Pro
                               </h1>
                               <div className="flex items-center gap-4">
                                   <div className="text-sm">
                                       <i className="fas fa-user mr-2"></i>
                                       {user.name} ({user.role})
                                   </div>
                                   <button
                                       onClick={logout}
                                       className="px-3 py-1 bg-red-600 rounded hover:bg-red-700 transition-colors"
                                   >
                                       <i className="fas fa-sign-out-alt mr-2"></i>
                                       ออกจากระบบ
                                   </button>
                               </div>
                           </div>
                       </div>
                   </header>

                   {/* Navigation */}
                   <nav className="bg-white shadow-md sticky top-0 z-10">
                       <div className="container mx-auto px-4">
                           <div className="flex space-x-1">
                               {filteredNavigation.map(nav => (
                                   <button
                                       key={nav.id}
                                       onClick={() => setCurrentPage(nav.id)}
                                       className={`px-4 py-3 font-medium transition-all ${
                                           currentPage === nav.id
                                               ? 'text-amber-600 border-b-2 border-amber-600'
                                               : 'text-gray-600 hover:text-amber-600'
                                       }`}
                                   >
                                       <i className={`${nav.icon} mr-2`}></i>
                                       {nav.name}
                                   </button>
                               ))}
                           </div>
                       </div>
                   </nav>

                   {/* Main Content */}
                   <main className="container mx-auto px-4 py-6">
                       {currentPage === 'pos' && <POSScreen />}
                       {currentPage === 'menu' && user.role === 'admin' && <MenuManagement />}
                       {currentPage === 'history' && <SalesHistory />}
                       {currentPage === 'report' && <SalesReport />}
                   </main>

                   {/* Footer */}
                   <footer className="mt-auto bg-gray-800 text-white py-4 text-center">
                       <p className="text-sm">
                           © 2024 Coffee Shop POS Pro | Version 3.0
                       </p>
                   </footer>
               </div>
           );
       };

       // Root App with Auth Provider
       const App = () => {
           return (
               <AuthProvider>
                   <CoffeePOSApp />
               </AuthProvider>
           );
       };

       // Render App
       ReactDOM.render(<App />, document.getElementById('root'));
   </script>
</body>
</html>
